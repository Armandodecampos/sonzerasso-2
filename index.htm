<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login com Supabase</title>
    <!-- Carrega o Tailwind CSS para estilização rápida e responsiva -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Adiciona Font Awesome para os ícones -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" xintegrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap');
        :root {
            --text-primary: #1f2937; /* Default: Tailwind gray-800 */
        }
        body {
            font-family: 'Inter', sans-serif;
            @apply bg-gray-100;
        }
        .text-theme {
            color: var(--text-primary);
        }
        .shopping-list-item {
            @apply flex items-center justify-between p-3 border-b border-gray-200;
        }
        .shopping-list-item:last-child {
            @apply border-b-0;
        }
        .editable-item {
            @apply outline-none focus:ring-2 focus:ring-indigo-500 rounded-md;
        }
        .item-checked {
            @apply bg-green-200;
        }
        /* Estilos para a grade de botões arrastáveis */
        #button-grid-container {
            display: flex;
            flex-direction: column; /* Organiza os apps em uma coluna */
            align-items: flex-start; /* Alinha os apps à esquerda */
            gap: 16px; /* Espaçamento entre os apps */
        }
        .app-container {
            display: flex;
            flex-direction: row; /* Ícone e texto lado a lado */
            align-items: center; /* Alinha verticalmente o ícone e o texto */
            width: 100%; /* Ocupa a largura total */
            gap: 16px; /* Espaço entre o ícone e o texto */
        }
        #button-grid-container .grid-item {
            background-color: #333;
            width: 56px;
            height: 56px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease-in-out;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            flex-shrink: 0;
        }
        /* NOVO: Estilo para o ícone do app selecionado */
        #button-grid-container .grid-item.selected {
            transform: scale(1.15);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.2), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
        }
        .grid-item-icon {
            font-size: 1.5rem;
            color: white;
        }
        .grid-item-label {
            @apply font-semibold text-gray-700 text-base text-left; /* Texto maior e alinhado à esquerda */
            flex-grow: 1; /* Permite que o texto ocupe o espaço restante */
            margin-top: 0;
        }
        .app-container.dragging {
            @apply opacity-50 bg-gray-300;
        }
        /* Estilos para as Notas */
        .note-item {
            background-color: #FEF3C7;
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            padding: 15px;
            @apply rounded-lg aspect-square flex flex-col justify-between transition-transform duration-200 cursor-pointer;
        }
        .note-item:hover {
            @apply scale-105;
        }
        .note-title {
             @apply font-bold text-lg truncate mb-2;
             color: var(--text-primary);
        }
        .note-content-preview {
            min-width: 0;
            word-wrap: break-word;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 5; /* Limita o texto a 5 linhas */
            -webkit-box-orient: vertical;
            text-overflow: ellipsis;
            @apply flex-grow text-left;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            color: var(--text-primary);
        }
        .note-actions {
            display: flex;
            justify-content: space-between;
            width: 100%;
            align-items: center;
            padding-top: 0.5rem;
        }
        .note-button {
            @apply cursor-pointer;
        }
        .icon-picker-item {
            @apply cursor-pointer text-2xl text-gray-600 p-2 rounded-md hover:bg-gray-200 text-center;
        }
        .icon-picker-item.selected {
            @apply bg-indigo-500 text-white;
        }
        /* Estilos para o App de Receitas */
        .recipe-item {
            @apply bg-white rounded-lg shadow-md overflow-hidden transition-transform duration-200 cursor-pointer flex flex-col;
        }
        .recipe-item:hover {
            @apply scale-105 shadow-xl;
        }
        .recipe-image {
            width: 100%;
            height: 150px;
            object-fit: cover;
            @apply bg-gray-200;
        }
        .recipe-content-preview {
            min-width: 0;
            word-wrap: break-word;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            text-overflow: ellipsis;
            @apply text-sm;
            color: var(--text-primary);
        }
        .image-preview-item {
            @apply relative w-24 h-24 rounded-md overflow-hidden;
        }
        .image-preview-item img {
            @apply w-full h-full object-cover;
        }
        .remove-image-btn {
            @apply absolute top-1 right-1 bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold cursor-pointer;
        }
        .noselect {
            -webkit-touch-callout: none; /* iOS Safari */
            -webkit-user-select: none;   /* Safari */
            -khtml-user-select: none;    /* Konqueror HTML */
            -moz-user-select: none;      /* Old versions of Firefox */
            -ms-user-select: none;       /* Internet Explorer/Edge */
            user-select: none;           /* Non-prefixed version, currently supported by Chrome, Edge, Opera and Firefox */
        }
        button {
            -webkit-tap-highlight-color: transparent;
        }
        /* Correção para remover a borda de foco/toque no botão de perfil */
        #profile-button:focus, #profile-button:active {
            outline: none !important;
            box-shadow: none !important;
            -webkit-tap-highlight-color: transparent !important;
        }
    </style>
</head>
<body>
    <!-- Novo container principal para centralizar todos os elementos -->
    <div id="main-container" class="flex items-center justify-center min-h-screen p-4">
        <!-- Conteúdo do Login -->
        <div id="app" class="w-full max-w-md">
            <div id="initial-login-view" class="text-center">
                 <button id="show-profiles-button" class="px-8 py-4 bg-indigo-600 hover:bg-indigo-700 text-white font-bold text-2xl rounded-md shadow-lg hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transform transition-all duration-300 ease-in-out">
                    Acessar
                </button>
            </div>

            <!-- Lista de Usuários (inicialmente escondida) -->
            <div id="user-list-container" class="hidden fixed inset-0 bg-gray-100 flex flex-col items-center justify-center gap-8 p-4">
                <div id="user-cards-wrapper" class="flex flex-col items-center gap-8 w-full max-w-sm">
                    <!-- Usuários serão injetados aqui via JavaScript -->
                </div>
                <button id="back-to-initial-button" class="absolute top-6 left-6 px-4 py-2 bg-white text-gray-800 font-semibold rounded-md shadow-sm hover:bg-gray-200 focus:outline-none transition-all flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Voltar
                </button>
            </div>

            <!-- Formulário de Login (inicialmente escondido) -->
            <div id="login-form-container" class="hidden fixed inset-0 bg-gray-100 flex flex-col items-center justify-center p-4">
                <div class="w-full max-w-xs space-y-4">
                    <!-- Display do usuário selecionado -->
                    <div class="flex flex-col items-center mb-2">
                        <p id="selected-user-name" class="text-xl font-bold text-gray-800"></p>
                    </div>

                    <!-- Campo da Senha -->
                    <div class="w-full">
                        <label for="password" class="block text-lg font-medium text-gray-700 text-center mb-2">Senha</label>
                        <input type="password" id="password" autocomplete="current-password" class="block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-center text-lg">
                    </div>

                    <!-- Botão de Entrar -->
                    <button id="login-button" class="w-full px-4 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-bold rounded-md shadow-lg hover:shadow-xl focus:outline-none transition-all text-lg">
                        Entrar
                    </button>

                    <!-- Botão de redefinir senha (agora como texto) -->
                    <button id="reset-password-button" class="!mt-2 w-full text-sm text-gray-600 hover:text-indigo-600 hover:underline focus:outline-none transition-colors duration-200">
                        Redefinir Senha
                    </button>
                </div>

                <!-- Botão Voltar -->
                <button id="back-button" class="absolute top-6 left-6 px-4 py-2 bg-white text-gray-800 font-semibold rounded-md shadow-sm hover:bg-gray-200 focus:outline-none transition-all flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Voltar
                </button>
            </div>

            <!-- Formulário de Nova Senha (inicialmente escondido) -->
            <div id="new-password-container" class="hidden space-y-6 bg-white p-6 rounded-xl shadow-lg">
                <button id="back-button-new-password" class="w-full flex items-center justify-center px-4 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md shadow-sm hover:bg-gray-300 focus:outline-none transition-all">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Voltar
                </button>
                <p class="text-center font-semibold text-gray-700 text-lg">Defina sua nova senha</p>
                <div class="relative">
                    <label for="new-password" class="block text-sm font-medium text-gray-700">Nova Senha</label>
                    <input type="password" id="new-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="relative">
                    <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirme a Senha</label>
                    <input type="password" id="confirm-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <button id="update-password-button" class="w-full px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all">
                    Confirmar
                </button>
            </div>
        </div>
    </div>

    <!-- Nova tela do usuário logado -->
    <div id="logged-in-app" class="hidden h-screen overflow-hidden">
        <!-- Container fixo no canto superior esquerdo -->
        <div id="main-header" class="fixed top-0 left-0 right-0 bg-white p-4 shadow-md z-40 h-24 flex items-center">
            <button id="profile-button" class="flex items-center space-x-4 p-2 rounded-full transition-all duration-200 focus:outline-none">
                <img id="user-avatar-logged-in" src="https://placehold.co/100x100/A0A0A0/FFFFFF?text=P" alt="Profile" class="w-12 h-12 rounded-full object-cover">
                <p id="user-email-display" class="text-xl font-bold text-theme noselect"></p>
            </button>
            <!-- Botões de Ação -->
            <div class="absolute right-4 top-1/2 -translate-y-1/2 flex items-center space-x-2">
                 <button id="trash-bin-button" class="w-12 h-12 flex items-center justify-center rounded-full text-white bg-gray-500 hover:bg-gray-600 shadow-xl hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transform transition-all duration-300 ease-in-out">
                    <i class="fas fa-archive"></i>
                </button>
                <button id="add-app-button" class="w-12 h-12 flex items-center justify-center rounded-full text-white bg-indigo-600 hover:bg-indigo-700 shadow-xl hover:scale-110 hover:shadow-2xl focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transform transition-all duration-300 ease-in-out">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
        </div>

        <!-- Modal de Ações do Aplicativo -->
        <div id="app-action-bar" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
            <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-xs w-full flex flex-col space-y-4">
                <button id="open-app-button" class="w-full px-4 py-3 text-white font-bold rounded-md shadow-lg hover:shadow-xl transition-all text-lg bg-blue-500 hover:bg-blue-600">
                    Abrir
                </button>
                <button id="edit-app-button" class="w-full px-4 py-3 text-white font-bold rounded-md shadow-lg hover:shadow-xl transition-all text-lg bg-yellow-500 hover:bg-yellow-600">
                    Editar
                </button>
                <button id="delete-app-button" class="w-full px-4 py-3 text-white font-bold rounded-md shadow-lg hover:shadow-xl transition-all text-lg bg-red-500 hover:bg-red-600">
                    <span id="delete-app-text">Remover</span>
                </button>
                <button id="close-app-modal-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors mt-2">
                    Fechar
                </button>
            </div>
        </div>

        <!-- Grade de botões arrastáveis -->
        <div id="button-grid-container" class="fixed top-24 inset-x-0 bottom-0 p-4 overflow-y-auto transition-all duration-300">
            <!-- Aplicativos serão injetados aqui -->
        </div>
    </div>

    <!-- Modal para opções do perfil -->
    <div id="profile-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-profile-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-theme">Opções do Perfil</h3>
            <button id="edit-profile-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                Editar Perfil
            </button>
            <button id="change-password-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                Trocar Senha
            </button>
            <button id="settings-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                Configurações
            </button>
            <button id="logout-button" class="w-full px-4 py-3 bg-red-500 text-white font-semibold rounded-md hover:bg-red-600 transition-colors">
                Sair
            </button>
        </div>
    </div>

    <!-- Novo Modal para editar perfil -->
    <div id="edit-profile-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-edit-profile-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-theme">Editar Perfil</h3>

            <!-- Novo campo para o nome do perfil -->
            <div class="relative">
                <label for="profile-name" class="block text-sm font-medium text-left text-theme">Nome do Perfil</label>
                <input type="text" id="profile-name-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" maxlength="21">
            </div>
            <button id="update-profile-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                Salvar Nome do Perfil
            </button>

            <label for="avatar-upload" class="block text-sm font-medium text-left text-theme">Trocar Foto</label>
            <input type="file" id="avatar-upload" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"/>
            <button id="upload-avatar-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                Fazer Upload da Foto
            </button>
            <p id="upload-message" class="text-sm font-medium p-2 rounded-lg" style="display: none;"></p>
        </div>
    </div>

    <!-- Modal para confirmação de redefinição de senha -->
    <div id="reset-password-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm text-center space-y-4">
            <h3 class="text-xl font-bold text-theme">Verifique seu Email</h3>
            <p class="text-theme">Um link para redefinição de senha foi enviado para <span id="reset-email-display" class="font-semibold text-indigo-600"></span>. Siga as instruções para criar uma nova senha.</p>
            <button id="close-modal-button" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <!-- Novo Modal de Mensagem de Espera -->
    <div id="wait-message-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-theme">Aguarde</h3>
            <p class="text-theme">É necessário aguardar para enviar outro e-mail. Por favor, aguarde <span id="wait-time" class="font-semibold text-indigo-600"></span> segundos.</p>
            <button id="close-wait-modal" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <!-- Novo Modal da Lista de Compras -->
    <div id="shopping-list-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <!-- Cabeçalho do Modal -->
        <header class="flex flex-col p-4 bg-white shadow-md">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-theme">Lista de Compras</h2>
                <button id="close-shopping-list-button" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <!-- Botões de filtro -->
            <div class="flex justify-center space-x-2">
                <button id="filter-all" class="filter-button bg-indigo-200 text-indigo-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">Todos</button>
                <button id="filter-to-buy" class="filter-button bg-orange-200 text-orange-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">Para comprar</button>
                <button id="filter-bought" class="filter-button bg-green-200 text-green-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">Comprados</button>
            </div>
        </header>

        <!-- Corpo da Lista de Itens -->
        <div id="shopping-list-container" class="flex-grow overflow-y-auto p-4 space-y-2 pb-20">
            <!-- Itens da lista serão injetados aqui -->
        </div>

        <!-- Botão fixo para adicionar novo item -->
        <footer class="p-4 bg-white shadow-lg fixed bottom-0 left-0 right-0">
            <button id="show-add-item-modal-button" class="w-full px-4 py-3 bg-orange-500 text-white font-semibold rounded-md hover:bg-orange-600 transition-colors">
                Adicionar item para comprar
            </button>
        </footer>
    </div>

    <!-- Modal para Seleção de Filtro de Notas -->
    <div id="note-filter-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-[60]">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-xs w-full flex flex-col space-y-2">
            <h3 class="text-xl font-bold text-center text-theme mb-2">Filtrar Notas Por</h3>
            <button class="note-filter-option w-full text-left p-3 hover:bg-gray-100 rounded-md" data-filter="active">Dia de Hoje</button>
            <button class="note-filter-option w-full text-left p-3 hover:bg-gray-100 rounded-md" data-filter="futuras">Futuras</button>
            <button class="note-filter-option w-full text-left p-3 hover:bg-gray-100 rounded-md" data-filter="antigas">Antigas</button>
            <button class="note-filter-option w-full text-left p-3 hover:bg-gray-100 rounded-md" data-filter="fixed">Fixas</button>
            <button class="note-filter-option w-full text-left p-3 hover:bg-gray-100 rounded-md" data-filter="all">Todas</button>
            <button id="close-note-filter-modal-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors mt-4">
                Fechar
            </button>
        </div>
    </div>

    <!-- Novo Modal para Adicionar Itens -->
    <div id="add-item-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 class="text-2xl font-bold text-theme">Adicionar Item</h2>
            <button id="close-add-item-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div class="flex flex-col p-4 bg-gray-100 flex-grow space-y-4">
            <div class="relative">
                <label for="add-item-name-input" class="block text-sm font-medium text-left text-theme">Nome do Item</label>
                <input type="text" id="add-item-name-input" placeholder="Ex: Maçãs" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="flex space-x-2">
                <div class="relative flex-grow">
                    <label for="add-item-quantity-input" class="block text-sm font-medium text-left text-theme">Quantidade</label>
                    <input type="number" id="add-item-quantity-input" placeholder="Qtd" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="relative">
                    <label for="add-item-unit-input" class="block text-sm font-medium text-left text-theme">Unidade</label>
                    <select id="add-item-unit-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="uni">un</option>
                        <option value="kg">kg</option>
                        <option value="g">g</option>
                        <option value="litro">litro</option>
                        <option value="ml">ml</option>
                    </select>
                </div>
            </div>
            <div class="flex justify-between space-x-4">
                <button id="add-item-confirm-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                    Adicionar
                </button>
                 <button id="add-item-cancel-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                    Cancelar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal para editar itens da lista de compras (AGORA EM TELA CHEIA) -->
    <div id="edit-item-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 class="text-2xl font-bold text-theme">Editar Item</h2>
            <button id="close-edit-item-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div class="flex flex-col p-4 bg-gray-100 flex-grow space-y-4">
            <div class="relative">
                <label for="edit-item-input" class="block text-sm font-medium text-left text-theme">Nome do Item</label>
                <input type="text" id="edit-item-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="flex space-x-2">
                <div class="relative flex-grow">
                    <label for="edit-item-quantity" class="block text-sm font-medium text-left text-theme">Quantidade</label>
                    <input type="number" id="edit-item-quantity" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="relative">
                    <label for="edit-item-unit" class="block text-sm font-medium text-left text-theme">Unidade</label>
                    <select id="edit-item-unit" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                        <option value="uni">un</option>
                        <option value="kg">kg</option>
                        <option value="g">g</option>
                        <option value="litro">litro</option>
                        <option value="ml">ml</option>
                    </select>
                </div>
            </div>
            <div class="flex justify-between space-x-4">
                <button id="save-edit-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                    Salvar Alterações
                </button>
                 <button id="cancel-edit-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                    Cancelar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal para confirmação de exclusão -->
    <div id="delete-confirm-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-[100]">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-theme">Confirmar Exclusão</h3>
            <p id="delete-confirm-message" class="text-theme">Tem certeza que deseja excluir este item da lista?</p>
            <div class="flex justify-center space-x-4">
                <button id="cancel-delete-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="confirm-delete-button" class="px-6 py-2 bg-red-500 text-white font-semibold rounded-md hover:bg-red-600">Excluir</button>
            </div>
        </div>
    </div>

    <!-- Modal para confirmação de mover item -->
    <div id="move-item-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-[100]">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-theme">Confirmar Ação</h3>
            <p id="move-item-confirm-message" class="text-theme"></p>
            <div class="flex justify-center space-x-4">
                <button id="cancel-move-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">Cancelar</button>
                <button id="confirm-move-button" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">Confirmar</button>
            </div>
        </div>
    </div>

    <!-- Modal para Configurações de Papel de Parede -->
    <div id="settings-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <div class="flex justify-end">
                <button id="close-settings-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <h3 class="text-2xl font-bold text-theme">Personalizar Aparência</h3>

            <div class="relative">
                <label for="header-color-input" class="block text-sm font-medium text-left text-theme">Cor do Cabeçalho</label>
                <input type="color" id="header-color-input" class="mt-1 block w-full h-10 px-1 py-1 border border-gray-300 rounded-md shadow-sm" value="#FFFFFF">
            </div>

            <div class="relative">
                <label for="wallpaper-color-input" class="block text-sm font-medium text-left text-theme">Cor do Papel de Parede</label>
                <input type="color" id="wallpaper-color-input" class="mt-1 block w-full h-10 px-1 py-1 border border-gray-300 rounded-md shadow-sm" value="#FFFFFF">
            </div>

            <div class="relative">
                <label for="text-color-input" class="block text-sm font-medium text-left text-theme">Cor do Texto</label>
                <input type="color" id="text-color-input" class="mt-1 block w-full h-10 px-1 py-1 border border-gray-300 rounded-md shadow-sm" value="#1f2937">
            </div>

            <div>
                <label for="wallpaper-upload" class="block text-sm font-medium text-left text-theme">Carregar Imagem de Fundo</label>
                <input type="file" id="wallpaper-upload" accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 mt-1"/>
                <p id="wallpaper-upload-message" class="text-sm font-medium p-2 rounded-lg" style="display: none;"></p>
            </div>

            <button id="remove-wallpaper-button" class="w-full px-4 py-3 bg-orange-500 text-white font-semibold rounded-md hover:bg-orange-600 transition-colors">
                Remover Personalização
            </button>

            <div class="flex justify-between space-x-4 pt-4">
                <button id="cancel-settings-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                    Cancelar
                </button>
                <button id="save-settings-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                    Salvar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal de Notas Pessoais -->
    <div id="notes-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 class="text-2xl font-bold text-theme">Notas</h2>
            <button id="close-notes-modal-button" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
        </header>
        <div class="p-4 bg-white sticky top-0 z-10 shadow-sm flex justify-start items-center space-x-4">
            <button id="show-note-filter-modal-button" class="p-2 rounded-md hover:bg-gray-200 text-gray-600">
                <i class="fas fa-filter text-xl"></i>
            </button>
            <p id="current-note-filter-display" class="font-semibold text-lg text-gray-700">Notas de Hoje</p>
        </div>
        <div id="notes-container" class="flex-grow overflow-y-auto p-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 items-start">
            <!-- As notas serão inseridas aqui -->
        </div>
        <footer class="p-4 bg-white shadow-lg">
            <button id="show-add-note-modal-button" class="w-full px-4 py-3 bg-yellow-400 text-yellow-900 font-semibold rounded-md hover:bg-yellow-500 transition-colors">
                Criar Nova Nota
            </button>
        </footer>
    </div>

     <!-- Modal para Ver Nota -->
    <div id="view-note-modal" class="fixed inset-0 bg-white hidden flex-col z-[90]">
        <header class="flex items-center justify-between p-4 border-b flex-shrink-0">
            <h2 id="view-note-title" class="text-2xl font-bold truncate text-theme"></h2>
            <button id="close-view-note-modal-button" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <!-- Container de scroll -->
        <div class="flex-grow overflow-y-auto">
            <div class="p-6">
                <p id="view-note-content" class="whitespace-pre-wrap break-words text-theme"></p>
            </div>
        </div>
    </div>

    <!-- Modal para Adicionar/Editar Nota -->
    <div id="edit-note-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-[80]">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 id="note-modal-title" class="text-2xl font-bold text-theme"></h2>
            <button id="close-edit-note-modal-button" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div class="flex flex-col p-4 bg-gray-100 flex-grow space-y-4">
            <input type="text" id="edit-note-title" class="w-full p-2 border rounded-md" placeholder="Título...">
            <div class="flex items-center space-x-4">
                <div class="flex-grow">
                    <label for="edit-note-start-date" class="block text-sm font-medium text-theme">Data de Início</label>
                    <input type="date" id="edit-note-start-date" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm">
                </div>
                <div class="flex-grow">
                    <label for="edit-note-end-date" class="block text-sm font-medium text-theme">Data de Fim</label>
                    <input type="date" id="edit-note-end-date" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm">
                </div>
            </div>
            <div class="flex items-center">
                <input type="checkbox" id="edit-note-is-fixed" class="h-4 w-4 text-indigo-600 border-gray-300 rounded">
                <label for="edit-note-is-fixed" class="ml-2 block text-sm text-theme">Nota Fixa</label>
            </div>
            <textarea id="edit-note-input" rows="6" class="w-full p-2 border rounded-md resize-y" placeholder="Escreva a sua nota..."></textarea>
            <p id="note-error-message" class="text-red-500 text-sm text-center hidden"></p>
            <div class="flex justify-end space-x-4">
                <button id="cancel-note-edit-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="save-note-edit-button" class="px-6 py-2 bg-yellow-400 text-yellow-900 font-semibold rounded-md hover:bg-yellow-500">Salvar</button>
            </div>
        </div>
    </div>

    <!-- Novo Modal para adicionar aplicativos personalizados -->
    <div id="add-app-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 id="add-app-title" class="text-2xl font-bold truncate text-theme">Adicionar Aplicativo</h2>
            <button id="close-add-app-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div class="flex flex-col p-4 bg-gray-100 flex-grow space-y-4 overflow-y-auto">
            <div class="relative">
                <label for="app-title-input" class="block text-sm font-medium text-left text-theme">Título</label>
                <input type="text" id="app-title-input" placeholder="Ex: Google" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="relative">
                <label for="app-url-input" class="block text-sm font-medium text-left text-theme">URL</label>
                <input type="url" id="app-url-input" placeholder="Ex: https://google.com" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>

            <!-- Novos campos para personalização -->
            <div>
                <label class="block text-sm font-medium text-left text-theme">Ícone</label>
                <div id="icon-picker-container" class="mt-1 grid grid-cols-5 sm:grid-cols-8 gap-2 p-2 bg-white rounded-md border border-gray-300">
                    <!-- Ícones serão injetados aqui via JS -->
                </div>
                <input type="hidden" id="app-icon-class-input">
            </div>

            <div class="flex space-x-4">
                <div class="w-1/2">
                    <label for="app-bg-color-input" class="block text-sm font-medium text-left text-theme">Cor de Fundo</label>
                    <input type="color" id="app-bg-color-input" value="#333333" class="mt-1 block w-full h-10 px-1 py-1 border border-gray-300 rounded-md shadow-sm">
                </div>
                <div class="w-1/2">
                    <label for="app-icon-color-input" class="block text-sm font-medium text-left text-theme">Cor do Ícone</label>
                    <input type="color" id="app-icon-color-input" value="#FFFFFF" class="mt-1 block w-full h-10 px-1 py-1 border border-gray-300 rounded-md shadow-sm">
                </div>
            </div>

            <div class="flex justify-between space-x-4 pt-2">
                <button id="save-app-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">
                    Salvar
                </button>
                <button id="cancel-add-app-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300 transition-colors">
                    Cancelar
                </button>
            </div>
        </div>
    </div>

    <!-- Novo Modal para Editar Nome de App Fixo -->
    <div id="edit-fixed-app-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full space-y-4">
            <h3 id="edit-fixed-app-title" class="text-2xl font-bold text-center text-theme">Editar Nome</h3>
            <div class="relative">
                <label for="fixed-app-name-input" class="block text-sm font-medium text-left text-theme">Novo Nome</label>
                <input type="text" id="fixed-app-name-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="flex justify-between space-x-4 pt-2">
                <button id="cancel-edit-fixed-app-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="save-edit-fixed-app-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">Salvar</button>
            </div>
        </div>
    </div>

    <!-- Novo Modal da Lixeira -->
    <div id="trash-bin-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 class="text-2xl font-bold text-theme">Baú</h2>
            <button id="close-trash-bin-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div id="trash-list-container" class="flex-grow overflow-y-auto p-4 space-y-2">
            <!-- Aplicativos removidos serão listados aqui -->
        </div>
    </div>

    <!-- Modal de Comparação de Preços -->
    <div id="price-comparison-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <!-- Cabeçalho do Modal -->
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <div>
                <h2 class="text-2xl font-bold text-theme">Comparar Preços</h2>
                <p id="comparison-item-name" class="text-lg text-theme"></p>
            </div>
            <button id="close-price-comparison-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>

        <!-- Formulário para Adicionar Preço -->
        <div class="p-4 bg-white border-b">
            <div class="flex flex-col sm:flex-row gap-2">
                <input type="text" id="price-location-input" placeholder="Nome do Local" class="flex-grow px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                <input type="number" id="price-value-input" placeholder="Preço (ex: 12.99)" step="0.01" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                <button id="add-price-button" class="px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700 transition-colors">Adicionar</button>
            </div>
        </div>

        <!-- Lista de Preços -->
        <div id="price-list-container" class="flex-grow overflow-y-auto p-4 space-y-2">
            <!-- Preços serão injetados aqui -->
        </div>
    </div>

    <!-- Modal para Editar Preço -->
    <div id="edit-price-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-[60]">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 class="text-2xl font-bold text-theme">Editar Preço</h2>
            <button id="close-edit-price-modal-x-button" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div class="flex flex-col p-4 bg-gray-100 flex-grow space-y-4">
            <div class="relative">
                <label for="edit-price-location-input" class="block text-sm font-medium text-left text-theme">Local</label>
                <input type="text" id="edit-price-location-input" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="relative">
                <label for="edit-price-value-input" class="block text-sm font-medium text-left text-theme">Preço</label>
                <input type="number" id="edit-price-value-input" step="0.01" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
            <div class="flex justify-between space-x-4 pt-2">
                <button id="save-edit-price-button" class="w-full px-4 py-3 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">Salvar</button>
                <button id="cancel-edit-price-button" class="w-full px-4 py-3 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
            </div>
        </div>
    </div>

    <!-- NOVO: Modal do App de Receitas -->
    <div id="recipes-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-50">
        <header class="p-4 bg-white shadow-md">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-2xl font-bold text-theme">Receitas</h2>
                <button id="close-recipes-modal" class="text-gray-500 hover:text-gray-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <!-- NOVA BARRA DE PESQUISA -->
            <div class="relative">
                <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                    <i class="fas fa-search text-gray-400"></i>
                </span>
                <input type="text" id="recipe-search-input" placeholder="Pesquisar receitas..." class="block w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
            </div>
        </header>
        <div id="recipes-container" class="flex-grow overflow-y-auto p-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 items-start pb-20">
            <!-- Receitas serão inseridas aqui -->
        </div>
        <footer class="p-4 bg-white shadow-lg fixed bottom-0 left-0 right-0">
            <button id="show-add-recipe-modal-button" class="w-full px-4 py-3 bg-green-500 text-white font-semibold rounded-md hover:bg-green-600 transition-colors">
                Adicionar Nova Receita
            </button>
        </footer>
    </div>

    <!-- NOVO: Modal para Adicionar/Editar Receita -->
    <div id="edit-recipe-modal" class="fixed inset-0 bg-gray-100 hidden flex-col z-[60]">
        <header class="flex items-center justify-between p-4 bg-white shadow-md">
            <h2 id="recipe-modal-title" class="text-2xl font-bold text-theme"></h2>
            <button id="close-edit-recipe-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div class="flex flex-col p-4 bg-gray-100 flex-grow space-y-4 overflow-y-auto">
            <input type="text" id="edit-recipe-title" class="w-full p-3 border rounded-md text-lg" placeholder="Título da Receita...">
            <textarea id="edit-recipe-content" rows="8" class="w-full p-3 border rounded-md resize-y" placeholder="Modo de preparo..."></textarea>

            <div>
                <label class="block text-sm font-medium text-theme">Fotos (máx. 200px)</label>
                <input type="file" id="recipe-image-upload" multiple accept="image/*" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"/>
            </div>

            <div id="recipe-image-previews" class="flex flex-wrap gap-2">
                <!-- Previews das imagens aparecerão aqui -->
            </div>

            <p id="recipe-error-message" class="text-red-500 text-sm text-center hidden"></p>

            <div class="flex justify-end space-x-4">
                <button id="cancel-recipe-edit-button" class="px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-md hover:bg-gray-300">Cancelar</button>
                <button id="save-recipe-edit-button" class="px-6 py-2 bg-green-500 text-white font-semibold rounded-md hover:bg-green-600">Salvar</button>
            </div>
        </div>
    </div>

    <!-- NOVO: Modal para Ver Receita -->
    <div id="view-recipe-modal" class="fixed inset-0 bg-white hidden flex-col z-[70]">
        <header class="flex items-center justify-between p-4 border-b flex-shrink-0">
            <h2 id="view-recipe-title" class="text-2xl font-bold truncate text-theme"></h2>
            <button id="close-view-recipe-modal" class="text-gray-500 hover:text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </header>
        <div class="flex-grow overflow-y-auto p-6">
            <div id="view-recipe-images-container" class="flex flex-wrap gap-4 mb-6">
                <!-- Imagens da receita aqui -->
            </div>
            <p id="view-recipe-content" class="whitespace-pre-wrap break-words text-lg text-theme"></p>
        </div>
    </div>


    <script type="module">
        // --- CORREÇÃO IMPORTANTE PARA O ERRO "INVALID API KEY" ---
        // O erro que está a receber ("Invalid API key") significa que os valores abaixo
        // não correspondem ao seu projeto Supabase. É necessário substituí-los.
        //
        // COMO RESOLVER:
        // 1. Vá ao painel do seu projeto no site do Supabase.
        // 2. Navegue até "Project Settings" (Definições do Projeto) e depois "API".
        // 3. Copie o "Project URL" e cole no lugar de 'SUA_SUPABASE_URL'.
        // 4. Na mesma página, copie a chave "anon" (pública) e cole no lugar de 'SUA_SUPABASE_ANON_KEY'.
        //
        // O código não funcionará até que substitua estas duas linhas com as suas chaves corretas.
        const SUPABASE_URL = 'https://jtwybbvfbcwitbumsxno.supabase.co'; // Substitua com o seu URL do projeto
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp0d3liYnZmYmN3aXRidW1zeG5vIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgxMTc4NTUsImV4cCI6MjA3MzY5Mzg1NX0.Q9ro0O3dSSGEPMukNHz-wqoHBUMdEVPKKPoCVH_1epQ'; // Substitua com a sua chave anon (pública)




        import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';

        // Configura o cliente do Supabase para não persistir a sessão no navegador
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
            auth: {
                persistSession: false
            }
        });

        // --- REFERÊNCIAS DE ELEMENTOS HTML ---
        const mainContainer = document.getElementById('main-container');
        const app = document.getElementById('app');
        const loggedInAppContainer = document.getElementById('logged-in-app');
        const userListContainer = document.getElementById('user-list-container');
        const userCardsWrapper = document.getElementById('user-cards-wrapper');
        const loginFormContainer = document.getElementById('login-form-container');
        const selectedUserAvatar = document.getElementById('selected-user-avatar');
        const selectedUserName = document.getElementById('selected-user-name');
        const userEmailDisplay = document.getElementById('user-email-display');
        const passwordInput = document.getElementById('password');
        const loginButton = document.getElementById('login-button');
        const resetPasswordButton = document.getElementById('reset-password-button');
        const backButton = document.getElementById('back-button');
        const backToInitialButton = document.getElementById('back-to-initial-button');
        const resetPasswordModal = document.getElementById('reset-password-modal');
        const resetEmailDisplay = document.getElementById('reset-email-display');
        const closeModalButton = document.getElementById('close-modal-button');
        const newPasswordContainer = document.getElementById('new-password-container');
        const newPasswordInput = document.getElementById('new-password');
        const confirmPasswordInput = document.getElementById('confirm-password');
        const updatePasswordButton = document.getElementById('update-password-button');
        const backButtonNewPassword = document.getElementById('back-button-new-password');
        const userInitialsLoggedIn = document.getElementById('user-initials-logged-in');

        // Novas referências
        const profileButton = document.getElementById('profile-button');
        const profileModal = document.getElementById('profile-modal');
        const closeProfileModalButton = document.getElementById('close-profile-modal');
        const editProfileButton = document.getElementById('edit-profile-button');
        const changePasswordButton = document.getElementById('change-password-button');
        const logoutButtonModal = document.getElementById('logout-button');
        const editProfileModal = document.getElementById('edit-profile-modal');
        const closeEditProfileModalButton = document.getElementById('close-edit-profile-modal');
        const avatarUploadInput = document.getElementById('avatar-upload');
        const uploadAvatarButton = document.getElementById('upload-avatar-button');
        const uploadMessage = document.getElementById('upload-message');
        const userAvatarLoggedIn = document.getElementById('user-avatar-logged-in');
        const profileNameInput = document.getElementById('profile-name-input');
        const updateProfileButton = document.getElementById('update-profile-button');

        // Referências do novo modal de espera
        const waitMessageModal = document.getElementById('wait-message-modal');
        const waitTimeSpan = document.getElementById('wait-time');
        const closeWaitModalButton = document.getElementById('close-wait-modal');

        // Referências da nova lista de compras
        const shoppingListModal = document.getElementById('shopping-list-modal');
        const closeShoppingListButton = document.getElementById('close-shopping-list-button');
        const shoppingListContainer = document.getElementById('shopping-list-container');
        const filterAllButton = document.getElementById('filter-all');
        const filterToBuyButton = document.getElementById('filter-to-buy');
        const filterBoughtButton = document.getElementById('filter-bought');

        // Referências do novo modal de adicionar item
        const showAddItemModalButton = document.getElementById('show-add-item-modal-button');
        const addItemModal = document.getElementById('add-item-modal');
        const closeAddItemModalButton = document.getElementById('close-add-item-modal');
        const addItemNameInput = document.getElementById('add-item-name-input');
        const addItemQuantityInput = document.getElementById('add-item-quantity-input');
        const addItemUnitInput = document.getElementById('add-item-unit-input');
        const addItemConfirmButton = document.getElementById('add-item-confirm-button');
        const addItemCancelButton = document.getElementById('cancel-add-app-button');

        // Referências do novo modal de edição
        const editItemModal = document.getElementById('edit-item-modal');
        const closeEditItemModalButton = document.getElementById('close-edit-item-modal');
        const editItemInput = document.getElementById('edit-item-input');
        const editItemQuantity = document.getElementById('edit-item-quantity');
        const editItemUnit = document.getElementById('edit-item-unit');
        const saveEditButton = document.getElementById('save-edit-button');
        const cancelEditButton = document.getElementById('cancel-edit-button');

        // Referências do modal de confirmação de exclusão
        const deleteConfirmModal = document.getElementById('delete-confirm-modal');
        const confirmDeleteButton = document.getElementById('confirm-delete-button');
        const cancelDeleteButton = document.getElementById('cancel-delete-button');

        // Referências do modal de mover item
        const moveItemModal = document.getElementById('move-item-modal');
        const moveItemConfirmMessage = document.getElementById('move-item-confirm-message');
        const confirmMoveButton = document.getElementById('confirm-move-button');
        const cancelMoveButton = document.getElementById('cancel-move-button');

        // Referências do modal de configurações
        const settingsButton = document.getElementById('settings-button');
        const settingsModal = document.getElementById('settings-modal');
        const closeSettingsModalButton = document.getElementById('close-settings-modal');
        const headerColorInput = document.getElementById('header-color-input');
        const wallpaperColorInput = document.getElementById('wallpaper-color-input');
        const textColorInput = document.getElementById('text-color-input');
        const wallpaperUploadInput = document.getElementById('wallpaper-upload');
        const wallpaperUploadMessage = document.getElementById('wallpaper-upload-message');
        const removeWallpaperButton = document.getElementById('remove-wallpaper-button');
        const saveSettingsButton = document.getElementById('save-settings-button');
        const cancelSettingsButton = document.getElementById('cancel-settings-button');
        const buttonGridContainer = document.getElementById('button-grid-container');
        const mainHeader = document.getElementById('main-header');

        // Referências do App de Notas
        const notesModal = document.getElementById('notes-modal');
        const closeNotesModalButton = document.getElementById('close-notes-modal-button');
        const notesContainer = document.getElementById('notes-container');
        const showAddNoteModalButton = document.getElementById('show-add-note-modal-button');

        // Referências do Modal de Edição de Nota (usado para Adicionar e Editar)
        const editNoteModal = document.getElementById('edit-note-modal');
        const noteModalTitle = document.getElementById('note-modal-title');
        const closeEditNoteModalButton = document.getElementById('close-edit-note-modal-button');
        const editNoteTitleInput = document.getElementById('edit-note-title');
        const editNoteInput = document.getElementById('edit-note-input');
        const saveNoteEditButton = document.getElementById('save-note-edit-button');
        const cancelNoteEditButton = document.getElementById('cancel-note-edit-button');
        const editNoteStartDateInput = document.getElementById('edit-note-start-date');
        const editNoteEndDateInput = document.getElementById('edit-note-end-date');
        const editNoteIsFixedCheckbox = document.getElementById('edit-note-is-fixed');
        const noteErrorMessage = document.getElementById('note-error-message');

        // NOVO: Referências do Modal de Filtro de Notas
        const showNoteFilterModalButton = document.getElementById('show-note-filter-modal-button');
        const noteFilterModal = document.getElementById('note-filter-modal');
        const closeNoteFilterModalButton = document.getElementById('close-note-filter-modal-button');
        const currentNoteFilterDisplay = document.getElementById('current-note-filter-display');
        const noteFilterOptions = document.querySelectorAll('.note-filter-option');


        // Referências do Modal de Visualização de Nota
        const viewNoteModal = document.getElementById('view-note-modal');
        const viewNoteTitle = document.getElementById('view-note-title');
        const viewNoteContent = document.getElementById('view-note-content');
        const closeViewNoteModalButton = document.getElementById('close-view-note-modal-button');

        // Referências do novo modal para adicionar aplicativos
        const addAppButton = document.getElementById('add-app-button');
        const addAppModal = document.getElementById('add-app-modal');
        const closeAddAppModalButton = document.getElementById('close-add-app-modal');
        const appTitleInput = document.getElementById('app-title-input');
        const appUrlInput = document.getElementById('app-url-input');
        const saveAppButton = document.getElementById('save-app-button');
        const cancelAddAppButton = document.getElementById('cancel-add-app-button');
        const iconPickerContainer = document.getElementById('icon-picker-container');
        const appIconClassInput = document.getElementById('app-icon-class-input');
        const appBgColorInput = document.getElementById('app-bg-color-input');
        const appIconColorInput = document.getElementById('app-icon-color-input');

        // Referências da nova faixa de ações e seus botões
        const appActionBar = document.getElementById('app-action-bar');
        const openAppButton = document.getElementById('open-app-button');
        const editAppButton = document.getElementById('edit-app-button');
        const deleteAppButton = document.getElementById('delete-app-button');
        const closeAppModalButton = document.getElementById('close-app-modal-button');

        // Referências da Lixeira
        const trashBinButton = document.getElementById('trash-bin-button');
        const trashBinModal = document.getElementById('trash-bin-modal');
        const closeTrashBinModal = document.getElementById('close-trash-bin-modal');
        const trashListContainer = document.getElementById('trash-list-container');

        // Referências do Modal de Edição de App Fixo
        const editFixedAppModal = document.getElementById('edit-fixed-app-modal');
        const editFixedAppTitle = document.getElementById('edit-fixed-app-title');
        const fixedAppNameInput = document.getElementById('fixed-app-name-input');
        const saveEditFixedAppButton = document.getElementById('save-edit-fixed-app-button');
        const cancelEditFixedAppButton = document.getElementById('cancel-edit-fixed-app-button');

        // Referências da vista de login
        const initialLoginView = document.getElementById('initial-login-view');
        const showProfilesButton = document.getElementById('show-profiles-button');

        // Referências da Comparação de Preços
        const priceComparisonModal = document.getElementById('price-comparison-modal');
        const closePriceComparisonModalButton = document.getElementById('close-price-comparison-modal');
        const comparisonItemName = document.getElementById('comparison-item-name');
        const priceLocationInput = document.getElementById('price-location-input');
        const priceValueInput = document.getElementById('price-value-input');
        const addPriceButton = document.getElementById('add-price-button');
        const priceListContainer = document.getElementById('price-list-container');
        const editPriceModal = document.getElementById('edit-price-modal');
        const editPriceLocationInput = document.getElementById('edit-price-location-input');
        const editPriceValueInput = document.getElementById('edit-price-value-input');
        const saveEditPriceButton = document.getElementById('save-edit-price-button');
        const cancelEditPriceButton = document.getElementById('cancel-edit-price-button');
        const closeEditPriceModalXButton = document.getElementById('close-edit-price-modal-x-button');

        // NOVO: Referências do App de Receitas
        const recipesModal = document.getElementById('recipes-modal');
        const closeRecipesModal = document.getElementById('close-recipes-modal');
        const recipesContainer = document.getElementById('recipes-container');
        const showAddRecipeModalButton = document.getElementById('show-add-recipe-modal-button');
        const editRecipeModal = document.getElementById('edit-recipe-modal');
        const recipeModalTitle = document.getElementById('recipe-modal-title');
        const closeEditRecipeModal = document.getElementById('close-edit-recipe-modal');
        const editRecipeTitle = document.getElementById('edit-recipe-title');
        const editRecipeContent = document.getElementById('edit-recipe-content');
        const recipeImageUpload = document.getElementById('recipe-image-upload');
        const recipeImagePreviews = document.getElementById('recipe-image-previews');
        const recipeErrorMessage = document.getElementById('recipe-error-message');
        const cancelRecipeEditButton = document.getElementById('cancel-recipe-edit-button');
        const saveRecipeEditButton = document.getElementById('save-recipe-edit-button');
        const viewRecipeModal = document.getElementById('view-recipe-modal');
        const viewRecipeTitle = document.getElementById('view-recipe-title');
        const closeViewRecipeModal = document.getElementById('close-view-recipe-modal');
        const viewRecipeImagesContainer = document.getElementById('view-recipe-images-container');
        const viewRecipeContent = document.getElementById('view-recipe-content');
        const recipeSearchInput = document.getElementById('recipe-search-input');


        let selectedEmail = '';
        let editingItemId = null;
        let editingNoteId = null;
        let currentFilter = 'to-buy';
        let itemToDeleteInfo = null;
        let itemToMove = null;
        let notesSubscription = null;
        let currentNoteFilter = 'active';
        let customAppsSubscription = null;
        let isDragging = false;
        let tempPreferences = {}; // State for settings modal
        let currentComparisonItemId = null;
        let priceSubscription = null;
        let editingPriceId = null;
        // NOVO: Variáveis de estado para Receitas
        let allRecipes = [];
        let editingRecipeId = null;
        let recipeFilesToUpload = [];
        let recipeImagesToDelete = [];
        let recipesSubscription = null;
        let recipeImagesSubscription = null;
        let isAppInitialized = false;

        const availableIcons = [
            // Web & Interface
            'fas fa-link', 'fas fa-globe', 'fas fa-star', 'fas fa-heart', 'fas fa-home', 'fas fa-user', 'fas fa-cog',
            'fas fa-envelope', 'fas fa-search', 'fas fa-filter', 'fas fa-bell', 'fas fa-bookmark', 'fas fa-tag',
            'fas fa-print', 'fas fa-download', 'fas fa-upload', 'fas fa-share-alt', 'fas fa-check', 'fas fa-times',
            'fas fa-plus', 'fas fa-minus', 'fas fa-edit', 'fas fa-trash', 'fas fa-info-circle', 'fas fa-question-circle',
            'fas fa-exclamation-triangle', 'fas fa-exclamation-circle', 'fas fa-power-off', 'fas fa-sync-alt',

            // Objects & Items
            'fas fa-book', 'fas fa-gamepad', 'fas fa-music', 'fas fa-video', 'fas fa-camera', 'fas fa-cloud',
            'fas fa-code', 'fas fa-folder', 'fas fa-folder-open', 'fas fa-calculator', 'fas fa-briefcase', 'fas fa-store',
            'fas fa-gift', 'fas fa-key', 'fas fa-lock', 'fas fa-unlock', 'fas fa-wallet', 'fas fa-credit-card',
            'fas fa-shopping-bag', 'fas fa-shopping-cart', 'fas fa-box', 'fas fa-archive', 'fas fa-lightbulb',
            'fas fa-paint-brush', 'fas fa-wrench', 'fas fa-hammer', 'fas fa-tshirt',

            // Business & Finance
            'fas fa-chart-bar', 'fas fa-chart-line', 'fas fa-chart-pie', 'fas fa-dollar-sign', 'fas fa-euro-sign',
            'fas fa-pound-sign', 'fas fa-yen-sign', 'fas fa-piggy-bank', 'fas fa-building', 'fas fa-landmark',
            'fas fa-file-invoice-dollar', 'fas fa-handshake',

            // Communication
            'fas fa-phone', 'fas fa-phone-alt', 'fas fa-comments', 'fas fa-comment', 'fas fa-microphone',
            'fas fa-mobile-alt', 'fas fa-rss', 'fas fa-wifi',

            // Transportation & Travel
            'fas fa-car', 'fas fa-bus', 'fas fa-train', 'fas fa-plane', 'fas fa-ship', 'fas fa-bicycle',
            'fas fa-map-marker-alt', 'fas fa-compass', 'fas fa-suitcase', 'fas fa-route', 'fas fa-gas-pump',

            // Food & Drink
            'fas fa-coffee', 'fas fa-utensils', 'fas fa-pizza-slice', 'fas fa-hamburger', 'fas fa-glass-martini-alt',
            'fas fa-birthday-cake', 'fas fa-cookie-bite',

            // Health & Medical
            'fas fa-heartbeat', 'fas fa-medkit', 'fas fa-stethoscope', 'fas fa-user-md', 'fas fa-pills',
            'fas fa-first-aid', 'fas fa-dna',

            // Miscellaneous
            'fas fa-sun', 'fas fa-moon', 'fas fa-snowflake', 'fas fa-fire', 'fas fa-leaf', 'fas fa-tree',
            'fas fa-graduation-cap', 'fas fa-trophy', 'fas fa-futbol', 'fas fa-palette'
        ];

        const fixedAppsMasterList = [
            { id: 'shopping-list', title: 'Compras', iconClass: 'fas fa-shopping-cart', isFixed: true },
            { id: 'notes-app', title: 'Notas', iconClass: 'fas fa-sticky-note', isFixed: true },
            { id: 'recipes-app', title: 'Receitas', iconClass: 'fas fa-utensils', isFixed: true } // NOVO
        ];

        // --- FUNÇÕES DE INICIALIZAÇÃO E UI ---

        // Função para buscar os emails do Supabase e popular o dropdown
        async function fetchUsers() {
            const { data, error } = await supabase
                .from('profiles')
                .select('username, avatar_url, profile_name');

            if (error) {
                console.error('Erro ao buscar usuários:', error);
            } else if (data.length === 0) {
                 userCardsWrapper.innerHTML = '<p class="text-center text-gray-500">Nenhum usuário encontrado. Adicione usuários na tabela `profiles` do Supabase.</p>';
            } else {
                // NOVO: Ordena os usuários em ordem alfabética pelo nome do perfil ou, na falta deste, pelo nome de usuário.
                data.sort((a, b) => {
                    const nameA = (a.profile_name || a.username).toLowerCase();
                    const nameB = (b.profile_name || b.username).toLowerCase();
                    return nameA.localeCompare(nameB);
                });

                userCardsWrapper.innerHTML = '';
                data.forEach(user => {
                    const userCard = document.createElement('button');
                    // Apply Tailwind classes directly to make the user card look like a button
                    userCard.className = 'w-full px-8 py-4 bg-indigo-600 hover:bg-indigo-700 text-white font-bold text-2xl rounded-md shadow-lg hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transform transition-all duration-300 ease-in-out';
                    userCard.dataset.email = user.username;
                    userCard.textContent = user.profile_name || user.username;
                    userCardsWrapper.appendChild(userCard);
                });
            }
        }

        // Função para carregar os dados do perfil logado
        async function loadUserProfile(user) {
            const { data: profileData, error } = await supabase
                .from('profiles')
                .select('avatar_url, profile_name')
                .eq('id', user.id)
                .single();

            if (!error && profileData) {
                userAvatarLoggedIn.src = profileData.avatar_url || `https://placehold.co/100x100/A0A0A0/FFFFFF?text=${(profileData.profile_name || user.email).charAt(0).toUpperCase()}`;
                userEmailDisplay.textContent = profileData.profile_name || user.email;
                profileNameInput.value = profileData.profile_name || '';
            } else {
                const initial = user.email.charAt(0).toUpperCase();
                userAvatarLoggedIn.src = `https://placehold.co/100x100/A0A0A0/FFFFFF?text=${initial}`;
                userEmailDisplay.textContent = user.email;
                profileNameInput.value = '';
            }
        }

        // Função para alternar a visibilidade das áreas
        function toggleUI(isLoggedIn, view) {
            // Esconde todos os modais primeiro
            profileModal.classList.add('hidden');
            waitMessageModal.classList.add('hidden');
            editProfileModal.classList.add('hidden');
            settingsModal.classList.add('hidden');
            shoppingListModal.classList.add('hidden');
            deleteConfirmModal.classList.add('hidden');
            addItemModal.classList.add('hidden');
            moveItemModal.classList.add('hidden');
            notesModal.classList.add('hidden');
            editNoteModal.classList.add('hidden');
            viewNoteModal.classList.add('hidden');
            noteFilterModal.classList.add('hidden');
            addAppModal.classList.add('hidden');
            editFixedAppModal.classList.add('hidden');
            trashBinModal.classList.add('hidden');
            priceComparisonModal.classList.add('hidden');
            editPriceModal.classList.add('hidden');
            // NOVO: Esconder modais de receitas
            recipesModal.classList.add('hidden');
            editRecipeModal.classList.add('hidden');
            viewRecipeModal.classList.add('hidden');


            if (isLoggedIn) {
                // Mostra a App e esconde o contentor do Login
                loggedInAppContainer.classList.remove('hidden');
                mainContainer.classList.add('hidden');

                // Ajusta o estilo do body para a app
                document.body.classList.remove('bg-gray-100');

                // Call this AFTER the container is visible to get correct offsetHeight
                hideAppActionBar();

            } else {
                // Mostra o contentor do Login e esconde a App
                mainContainer.classList.remove('hidden');
                loggedInAppContainer.classList.add('hidden');

                // Just hide the bar, don't worry about grid position as it's hidden
                appActionBar.classList.add('hidden');
                appActionBar.classList.remove('flex');

                // Restaura o estilo do body para o login
                document.body.classList.add('bg-gray-100');

                // Lógica para posicionar o container
                if (view === 'login') {
                    mainContainer.classList.remove('items-center');
                    mainContainer.classList.add('items-start', 'pt-20');
                } else {
                    mainContainer.classList.add('items-center');
                    mainContainer.classList.remove('items-start', 'pt-20');
                }

                // Esconde todas as vistas dentro do ecrã de login
                initialLoginView.classList.add('hidden');
                userListContainer.classList.add('hidden');
                loginFormContainer.classList.add('hidden');
                newPasswordContainer.classList.add('hidden');

                // Mostra a vista de login correta
                if (view === 'user-list') {
                    userListContainer.classList.remove('hidden');
                    userListContainer.classList.add('flex');
                } else if (view === 'login') {
                    loginFormContainer.classList.remove('hidden');
                } else if (view === 'new-password') {
                    newPasswordContainer.classList.remove('hidden');
                } else { // A vista padrão é a inicial com o botão de login
                    initialLoginView.classList.remove('hidden');
                }
            }
        }

        // Função para exibir o modal de espera com a contagem regressiva
        function showWaitModal(seconds) {
            let timeLeft = seconds;
            waitTimeSpan.textContent = timeLeft;
            waitMessageModal.classList.remove('hidden');
            waitMessageModal.classList.add('flex');

            const timer = setInterval(() => {
                timeLeft--;
                waitTimeSpan.textContent = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    waitMessageModal.classList.add('hidden');
                    waitMessageModal.classList.remove('flex');
                }
            }, 1000);
        }

        // --- FUNÇÕES DE PAPEL DE PAREDE E APARÊNCIA ---

        // Aplica as preferências salvas (papel de parede e cor do cabeçalho)
        function applyPreferences(preferences) {
            // Estilos padrão
            const defaultWallpaperStyles = {
                backgroundImage: 'none',
                backgroundColor: '', // Reverte para o padrão do CSS
                backgroundSize: '',
                backgroundPosition: '',
                backgroundRepeat: ''
            };
            const defaultHeaderColor = ''; // Branco padrão do CSS

            // Aplica papel de parede
            const wallpaperPrefs = preferences?.wallpaper;
            if (wallpaperPrefs) {
                if (wallpaperPrefs.type === 'color') {
                    loggedInAppContainer.style.backgroundColor = wallpaperPrefs.value;
                    loggedInAppContainer.style.backgroundImage = 'none';
                } else if (wallpaperPrefs.type === 'image') {
                    loggedInAppContainer.style.backgroundImage = `url(${wallpaperPrefs.value})`;
                    loggedInAppContainer.style.backgroundSize = 'cover';
                    loggedInAppContainer.style.backgroundPosition = 'center';
                    loggedInAppContainer.style.backgroundRepeat = 'no-repeat';
                }
            } else {
                Object.assign(loggedInAppContainer.style, defaultWallpaperStyles);
            }

            // Aplica cor do cabeçalho e da faixa de ações
            const headerColor = preferences?.headerColor || defaultHeaderColor;
            mainHeader.style.backgroundColor = headerColor;
            appActionBar.style.backgroundColor = headerColor;

            // Aplica cor do texto apenas à área logada, não aos modais
            const textColor = preferences?.textColor || '#1f2937'; // Default to gray-800
            loggedInAppContainer.style.setProperty('--text-primary', textColor);
        }

        // Salva as preferências do usuário no Supabase
        async function saveUserPreferences(preferences) {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { error } = await supabase
                .from('profiles')
                .update({ preferences: preferences })
                .eq('id', user.id);

            if (error) {
                console.error('Erro ao salvar preferências:', error);
            }
        }

        // Carrega as preferências do usuário ao logar
        async function loadUserPreferences() {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { data, error } = await supabase
                .from('profiles')
                .select('preferences')
                .eq('id', user.id)
                .single();

            if (error && error.code !== 'PGRST116') {
                console.error('Erro ao carregar preferências:', error);
                applyPreferences(null); // Aplica defaults em caso de erro
            } else if (data && data.preferences) {
                applyPreferences(data.preferences);
                // Define os valores iniciais dos seletores de cor
                if (data.preferences.headerColor) {
                    headerColorInput.value = data.preferences.headerColor;
                }
                if (data.preferences.wallpaper?.type === 'color') {
                    wallpaperColorInput.value = data.preferences.wallpaper.value;
                }
                if (data.preferences.textColor) {
                    textColorInput.value = data.preferences.textColor;
                }
            } else {
                applyPreferences(null); // Nenhuma preferência salva, aplica defaults
            }
        }

        // --- FUNÇÕES DO APP DE NOTAS ---

        // Renderiza as notas na UI
        function renderNotes(notes) {
            notesContainer.innerHTML = ''; // Limpa o container
            if (notes.length === 0) {
                notesContainer.innerHTML = '<p class="text-center text-gray-500 col-span-full">Nenhuma nota encontrada.</p>';
                return;
            }

            notes.forEach(note => {
                const noteEl = document.createElement('div');
                noteEl.className = 'note-item';
                noteEl.dataset.id = note.id;
                noteEl.dataset.title = note.title || '';
                noteEl.dataset.content = note.content || '';
                noteEl.dataset.startDate = note.start_date || '';
                noteEl.dataset.endDate = note.end_date || '';
                noteEl.dataset.isFixed = note.is_fixed;

                noteEl.innerHTML = `
                    <div>
                        <h3 class="note-title">${note.title || 'Sem Título'}</h3>
                        <p class="note-content-preview">${note.content || ''}</p>
                    </div>
                    <div class="note-actions">
                         <div class="text-xs text-gray-500">
                            ${note.is_fixed
                                ? '<span><i class="fas fa-thumbtack"></i> Fixa</span>'
                                : note.start_date
                                    ? `<span>${new Date(note.start_date + 'T00:00:00').toLocaleDateString()} - ${new Date(note.end_date + 'T00:00:00').toLocaleDateString()}</span>`
                                    : ''}
                        </div>
                        <div>
                            <button class="note-button note-edit-button text-gray-600 hover:text-indigo-600 p-1"><i class="fas fa-edit"></i></button>
                            <button class="note-button note-delete-button text-gray-600 hover:text-red-600 p-1"><i class="fas fa-trash"></i></button>
                        </div>
                    </div>
                `;
                notesContainer.appendChild(noteEl);
            });
        }


        // Busca e renderiza as notas do usuário
        async function fetchNotes() {
            const { data: { user } = {} } = await supabase.auth.getUser();
            if (!user) return;

            let query = supabase
                .from('notes')
                .select('id, title, content, start_date, end_date, is_fixed')
                .eq('user_id', user.id);

            // Correção: Garante que estamos a usar a data local para evitar problemas de fuso horário.
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0'); // Meses são 0-indexados
            const day = String(now.getDate()).padStart(2, '0');
            const today = `${year}-${month}-${day}`;

            if (currentNoteFilter === 'fixed') {
                query = query.eq('is_fixed', true);
            } else if (currentNoteFilter === 'active') {
                // 'Ativas' (Dia de Hoje) são notas não fixas cujo período (de start_date a end_date) inclui o dia de hoje.
                query = query.eq('is_fixed', false)
                             .lte('start_date', today)
                             .gte('end_date', today);
            } else if (currentNoteFilter === 'futuras') {
                 // 'Futuras' são notas não fixas cuja data de início (start_date) é posterior a hoje.
                query = query.eq('is_fixed', false)
                             .gt('start_date', today);
            } else if (currentNoteFilter === 'antigas') {
                // 'Antigas' são notas não fixas cuja data final (end_date) já passou (é anterior a hoje).
                query = query.eq('is_fixed', false)
                             .lt('end_date', today);
            }

            // Aplica a ordenação com base no filtro selecionado
            switch(currentNoteFilter) {
                case 'active': // Dia de Hoje
                case 'fixed': // Fixas
                    query = query.order('title', { ascending: true });
                    break;
                case 'futuras': // Futuras
                    query = query.order('start_date', { ascending: true });
                    break;
                case 'antigas': // Antigas
                    query = query.order('end_date', { ascending: false });
                    break;
                case 'all': // Todas
                default:
                    // Prioriza notas fixas, depois ordena por data de início
                    query = query.order('is_fixed', { ascending: false }).order('start_date', { ascending: true, nullsFirst: false });
                    break;
            }

            const { data: notes, error } = await query;

            if (error) {
                console.error('Erro ao buscar notas:', error);
                notesContainer.innerHTML = '<p class="text-red-500">Não foi possível carregar as notas.</p>';
                return;
            }

            if (notes) {
                renderNotes(notes);
            }
        }

        // Adiciona uma nova nota
        async function addNote(title, content, startDate, endDate, isFixed) {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { error } = await supabase
                .from('notes')
                .insert({ title, content, user_id: user.id, start_date: startDate, end_date: endDate, is_fixed: isFixed });

            if (error) {
                console.error('Erro ao adicionar nota:', error);
            }
        }

        // Apaga uma nota
        async function deleteNote(noteId) {
            const { error } = await supabase
                .from('notes')
                .delete()
                .eq('id', noteId);

            if (error) {
                console.error('Erro ao apagar nota:', error);
            }
        }

        // Atualiza uma nota
        async function updateNote(noteId, title, content, startDate, endDate, isFixed) {
            const { error } = await supabase
                .from('notes')
                .update({ title, content, start_date: startDate, end_date: endDate, is_fixed: isFixed })
                .eq('id', noteId);
            if (error) {
                console.error('Erro ao atualizar nota:', error);
            }
        }

        function showViewNoteModal(title, content) {
            viewNoteTitle.textContent = title || 'Sem Título';
            viewNoteContent.textContent = content;
            viewNoteModal.classList.remove('hidden');
            viewNoteModal.classList.add('flex');
        }

        function closeViewNoteModal() {
            viewNoteModal.classList.add('hidden');
            viewNoteModal.classList.remove('flex');
        }

        function renderIconPicker(selectedIconClass) {
            iconPickerContainer.innerHTML = '';
            availableIcons.forEach(iconClass => {
                const iconEl = document.createElement('i');
                iconEl.className = `${iconClass} icon-picker-item`;
                if (iconClass === selectedIconClass) {
                    iconEl.classList.add('selected');
                }
                iconEl.addEventListener('click', () => {
                    // Remove selected from previous
                    const currentSelected = iconPickerContainer.querySelector('.selected');
                    if (currentSelected) {
                        currentSelected.classList.remove('selected');
                    }
                    // Add selected to new
                    iconEl.classList.add('selected');
                    // Update hidden input
                    appIconClassInput.value = iconClass;
                });
                iconPickerContainer.appendChild(iconEl);
            });
        }

        function showEditNoteModal(id, title, content, startDate, endDate, isFixed) {
            editingNoteId = id;
            if (id) {
                noteModalTitle.textContent = 'Editar Nota';
                editNoteTitleInput.value = title;
                editNoteInput.value = content;
                editNoteStartDateInput.value = startDate ? startDate.split('T')[0] : '';
                editNoteEndDateInput.value = endDate ? endDate.split('T')[0] : '';
                editNoteIsFixedCheckbox.checked = isFixed;
            } else {
                noteModalTitle.textContent = 'Adicionar Nova Nota';
                editNoteTitleInput.value = '';
                editNoteInput.value = '';
                editNoteStartDateInput.value = '';
                editNoteEndDateInput.value = '';
                editNoteIsFixedCheckbox.checked = false;
            }
            const fixed = editNoteIsFixedCheckbox.checked;
            editNoteStartDateInput.disabled = fixed;
            editNoteEndDateInput.disabled = fixed;
            editNoteModal.classList.remove('hidden');
            editNoteModal.classList.add('flex');
            editNoteTitleInput.focus();
            noteErrorMessage.classList.add('hidden');
        }

        function closeEditNoteModal() {
            editingNoteId = null;
            editNoteModal.classList.add('hidden');
            editNoteModal.classList.remove('flex');
            noteErrorMessage.classList.add('hidden');
        }

        // --- FUNÇÕES DA LISTA DE COMPRAS ---

        // Função para buscar e renderizar a lista de compras
        async function fetchShoppingList() {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                console.error('Usuário não autenticado.');
                return;
            }

            let query = supabase.from('shopping_list').select('*');

            if (currentFilter === 'to-buy') {
                query = query.eq('is_checked', false);
            } else if (currentFilter === 'bought') {
                query = query.eq('is_checked', true);
            }

            const { data, error } = await query.order('item_name', { ascending: true });

            if (error) {
                console.error('Erro ao buscar a lista de compras:', error);
                shoppingListContainer.innerHTML = '<p class="text-center text-red-500">Erro ao carregar a lista.</p>';
            } else {
                renderShoppingList(data);
            }
        }

        // Função para renderizar os itens na UI
        function renderShoppingList(items) {
            shoppingListContainer.innerHTML = '';
            if (items.length === 0) {
                shoppingListContainer.innerHTML = '<p class="text-center text-gray-500">A lista está vazia. Adicione um item!</p>';
                return;
            }
            items.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.dataset.id = item.id;

                if (item.is_checked) {
                    itemDiv.className = 'shopping-list-item flex items-center justify-between p-3 border-b border-gray-200 bg-green-200 rounded-lg shadow-sm transition-colors duration-200';
                } else {
                    itemDiv.className = 'shopping-list-item flex items-center justify-between p-3 border-b border-gray-200 bg-orange-200 rounded-lg shadow-sm transition-colors duration-200';
                }

                const mainContent = document.createElement('div');
                mainContent.className = 'flex items-center flex-grow space-x-2';

                const quantitySpan = document.createElement('span');
                quantitySpan.className = 'font-medium whitespace-nowrap text-theme';
                if (item.quantity || item.unit) {
                    quantitySpan.textContent = `${item.quantity || ''} ${item.unit || ''}`;
                }

                const itemNameSpan = document.createElement('span');
                itemNameSpan.className = 'text-lg cursor-pointer truncate flex-grow text-theme';
                itemNameSpan.textContent = item.item_name;
                itemNameSpan.addEventListener('click', () => {
                    showMoveItemConfirmationModal(item.id, !item.is_checked);
                });

                const actionButtons = document.createElement('div');
                actionButtons.className = 'flex items-center space-x-2 flex-shrink-0';

                const deleteButton = document.createElement('button');
                deleteButton.className = 'delete-item-button w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 text-red-500 hover:text-red-700 transition-colors';
                deleteButton.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.013 21H7.987a2 2 0 01-1.92-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                `;

                const editButton = document.createElement('button');
                editButton.className = 'edit-item-button w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 text-gray-500 hover:text-gray-700 transition-colors';
                editButton.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                    </svg>
                `;
                editButton.addEventListener('click', () => showEditItemModal(item.id, item.item_name, item.quantity, item.unit));

                const compareButton = document.createElement('button');
                compareButton.className = 'compare-prices-button w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 text-blue-500 hover:text-blue-700 transition-colors';
                compareButton.innerHTML = `<i class="fas fa-dollar-sign text-lg"></i>`;
                compareButton.addEventListener('click', () => showPriceComparisonModal(item.id, item.item_name));

                mainContent.appendChild(quantitySpan);
                mainContent.appendChild(itemNameSpan);
                actionButtons.appendChild(compareButton);
                actionButtons.appendChild(editButton);
                actionButtons.appendChild(deleteButton);

                itemDiv.appendChild(mainContent);
                itemDiv.appendChild(actionButtons);

                shoppingListContainer.appendChild(itemDiv);
            });
        }

        function showEditItemModal(itemId, itemName, itemQuantity, itemUnit) {
            editingItemId = itemId;
            editItemInput.value = itemName;
            editItemQuantity.value = itemQuantity || '';
            editItemUnit.value = itemUnit || 'uni';
            editItemModal.classList.remove('hidden');
            editItemModal.classList.add('flex');
            editItemInput.focus();
        }

        function closeEditItemModal() {
            editingItemId = null;
            editItemInput.value = '';
            editItemQuantity.value = '';
            editItemUnit.value = 'uni';
            editItemModal.classList.add('hidden');
            editItemModal.classList.remove('flex');
        }

        async function updateItem(itemId, newItemName, newQuantity, newUnit) {
            const { error } = await supabase
                .from('shopping_list')
                .update({ item_name: newItemName, quantity: newQuantity, unit: newUnit })
                .eq('id', itemId);

            if (error) {
                console.error('Erro ao atualizar item:', error);
            }
        }

        async function toggleItemChecked(itemId, newStatus) {
            const { error } = await supabase
                .from('shopping_list')
                .update({ is_checked: newStatus })
                .eq('id', itemId);

            if (error) {
                console.error('Erro ao atualizar status do item:', error);
            }
        }

        async function addItem() {
            const newItemName = addItemNameInput.value.trim();
            const newQuantity = parseFloat(addItemQuantityInput.value) || null;
            const newUnit = addItemUnitInput.value;
            const { data: { user } } = await supabase.auth.getUser();

            if (!newItemName || !user) {
                return;
            }

            const { error } = await supabase
                .from('shopping_list')
                .insert([{ item_name: newItemName, quantity: newQuantity, unit: newUnit }]);

            if (error) {
                console.error('Erro ao adicionar item:', error);
            } else {
                addItemNameInput.value = '';
                addItemQuantityInput.value = '';
                addItemUnitInput.value = 'uni';
                hideAddItemModal();
            }
        }

        async function deleteItem(itemId) {
            const { error } = await supabase
                .from('shopping_list')
                .delete()
                .eq('id', itemId);

            if (error) {
                console.error('Erro ao deletar item:', error);
            }
        }

        const shoppingListChannel = supabase.channel('public:shopping_list')
            .on('postgres_changes', { event: '*', schema: 'public', table: 'shopping_list' }, payload => {
                fetchShoppingList();
            })
            .subscribe((status, err) => {
                if (status === 'SUBSCRIBED') {
                    console.log('Real-time subscription to shopping_list successful!');
                }
                if (err) {
                    console.error('Real-time subscription error:', err);
                }
            });

        function setActiveFilter(filter) {
            filterAllButton.classList.remove('bg-indigo-600', 'text-white');
            filterAllButton.classList.add('bg-indigo-200', 'text-indigo-800');

            filterToBuyButton.classList.remove('bg-orange-500', 'text-white');
            filterToBuyButton.classList.add('bg-orange-200', 'text-orange-800');

            filterBoughtButton.classList.remove('bg-green-500', 'text-white');
            filterBoughtButton.classList.add('bg-green-200', 'text-green-800');

            if (filter === 'all') {
                filterAllButton.classList.add('bg-indigo-600', 'text-white');
                filterAllButton.classList.remove('bg-indigo-200', 'text-indigo-800');
            } else if (filter === 'to-buy') {
                filterToBuyButton.classList.add('bg-orange-500', 'text-white');
                filterToBuyButton.classList.remove('bg-orange-200', 'text-orange-800');
            } else if (filter === 'bought') {
                filterBoughtButton.classList.add('bg-green-500', 'text-white');
                filterBoughtButton.classList.remove('bg-green-200', 'text-green-800');
            }
        }

        // --- FUNÇÕES DE COMPARAÇÃO DE PREÇOS ---
        async function fetchItemPrices(itemId) {
            if (!itemId) return;
            const { data, error } = await supabase
                .from('item_prices')
                .select('*')
                .eq('item_id', itemId);

            if (error) {
                console.error('Erro ao buscar preços:', error);
            } else {
                renderItemPrices(data);
            }
        }

        function renderItemPrices(prices) {
            priceListContainer.innerHTML = '';
            if (!prices || prices.length === 0) {
                priceListContainer.innerHTML = '<p class="text-center text-gray-500">Nenhum preço adicionado ainda.</p>';
                return;
            }

            // Ordena por preço, do menor para o maior
            prices.sort((a, b) => a.price - b.price);

            prices.forEach((price, index) => {
                const priceDiv = document.createElement('div');
                const isBestPrice = index === 0;
                priceDiv.className = `flex items-center justify-between p-3 rounded-lg shadow-sm border ${isBestPrice ? 'bg-green-100 border-green-400' : 'bg-white border-gray-200'}`;

                const formattedPrice = `R$ ${price.price.toFixed(2).replace('.', ',')}`;

                priceDiv.innerHTML = `
                    <div class="flex-grow">
                        <p class="font-bold text-lg text-theme">${price.location}</p>
                        <p class="font-semibold text-xl ${isBestPrice ? 'text-green-700' : 'text-gray-600'}">${formattedPrice}</p>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button class="edit-price-button p-2 text-gray-500 hover:text-gray-800" data-price-id="${price.id}" data-location="${price.location}" data-price="${price.price}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="delete-price-button p-2 text-red-500 hover:text-red-700" data-price-id="${price.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;
                priceListContainer.appendChild(priceDiv);
            });
        }

        async function addPrice() {
            const location = priceLocationInput.value.trim();
            const price = parseFloat(priceValueInput.value);
            const { data: { user } } = await supabase.auth.getUser();

            if (!location || isNaN(price) || !user || !currentComparisonItemId) {
                // Adicionar feedback ao usuário aqui, se desejar
                return;
            }

            const { error } = await supabase
                .from('item_prices')
                .insert({
                    item_id: currentComparisonItemId,
                    user_id: user.id,
                    location,
                    price
                });

            if (error) {
                console.error("Erro ao adicionar preço:", error);
            } else {
                priceLocationInput.value = '';
                priceValueInput.value = '';
            }
        }

        async function updatePrice(priceId, newLocation, newPrice) {
             const { error } = await supabase
                .from('item_prices')
                .update({ location: newLocation, price: newPrice })
                .eq('id', priceId);
            if (error) {
                console.error("Erro ao atualizar preço:", error);
            }
        }

        async function deletePrice(priceId) {
             const { error } = await supabase
                .from('item_prices')
                .delete()
                .eq('id', priceId);
            if (error) {
                console.error("Erro ao deletar preço:", error);
            }
        }

        function showPriceComparisonModal(itemId, itemName) {
            currentComparisonItemId = itemId;
            comparisonItemName.textContent = itemName;
            priceComparisonModal.classList.remove('hidden');
            priceComparisonModal.classList.add('flex');

            fetchItemPrices(itemId); // Busca inicial

            // Inicia a subscrição em tempo real
            if (priceSubscription) {
                supabase.removeChannel(priceSubscription);
            }
            priceSubscription = supabase
                .channel(`item_prices_${itemId}`)
                .on('postgres_changes', {
                    event: '*',
                    schema: 'public',
                    table: 'item_prices',
                    filter: `item_id=eq.${itemId}`
                }, payload => {
                    fetchItemPrices(itemId);
                })
                .subscribe();
        }

        function hidePriceComparisonModal() {
            priceComparisonModal.classList.add('hidden');
            priceComparisonModal.classList.remove('flex');
            currentComparisonItemId = null;
            comparisonItemName.textContent = '';
            priceLocationInput.value = '';
            priceValueInput.value = '';

            // Remove a subscrição para evitar escutas desnecessárias
            if (priceSubscription) {
                supabase.removeChannel(priceSubscription);
                priceSubscription = null;
            }
        }

        function showEditPriceModal(priceId, location, price) {
            editingPriceId = priceId;
            editPriceLocationInput.value = location;
            editPriceValueInput.value = price;
            editPriceModal.classList.remove('hidden');
            editPriceModal.classList.add('flex');
        }

        function hideEditPriceModal() {
            editingPriceId = null;
            editPriceModal.classList.add('hidden');
            editPriceModal.classList.remove('flex');
        }

        // --- NOVO: FUNÇÕES DO APP DE RECEITAS ---

        // Redimensiona uma imagem antes do upload
        function resizeImage(file, maxWidth, maxHeight) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.src = URL.createObjectURL(file);
                img.onload = () => {
                    const canvas = document.createElement('canvas');
                    let width = img.width;
                    let height = img.height;

                    if (width > height) {
                        if (width > maxWidth) {
                            height = Math.round((height * maxWidth) / width);
                            width = maxWidth;
                        }
                    } else {
                        if (height > maxHeight) {
                            width = Math.round((width * maxHeight) / height);
                            height = maxHeight;
                        }
                    }

                    canvas.width = width;
                    canvas.height = height;
                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(img, 0, 0, width, height);

                    canvas.toBlob(blob => {
                        resolve(blob);
                    }, file.type || 'image/jpeg');
                };
                img.onerror = reject;
            });
        }

        // Busca e renderiza as receitas
        async function fetchRecipes() {
            const { data, error } = await supabase
                .from('recipes')
                .select(`*, recipe_images(image_url)`)
                .order('title', { ascending: true });

            if (error) {
                console.error('Erro ao buscar receitas:', error);
                recipesContainer.innerHTML = '<p class="text-red-500">Não foi possível carregar as receitas.</p>';
                return;
            }
            allRecipes = data || []; // Armazena todas as receitas
            filterAndRenderRecipes(); // Renderiza com base no filtro atual
        }

        // Renderiza as receitas na UI
        function renderRecipes(recipes) {
            recipesContainer.innerHTML = '';
            if (recipes.length === 0) {
                recipesContainer.innerHTML = '<p class="text-center text-gray-500 col-span-full">Nenhuma receita encontrada.</p>';
                return;
            }

            recipes.forEach(recipe => {
                const recipeEl = document.createElement('div');
                recipeEl.className = 'recipe-item';
                recipeEl.dataset.id = recipe.id;

                const firstImage = recipe.recipe_images[0]?.image_url || 'https://placehold.co/400x300/CCCCCC/FFFFFF?text=Receita';

                recipeEl.innerHTML = `
                    <img src="${firstImage}" alt="${recipe.title}" class="recipe-image">
                    <div class="p-4 flex flex-col flex-grow">
                        <h3 class="font-bold text-lg mb-2 truncate text-theme">${recipe.title}</h3>
                        <p class="recipe-content-preview flex-grow">${recipe.content || ''}</p>
                        <div class="flex justify-end space-x-2 mt-4">
                            <button class="recipe-edit-button p-2 text-gray-500 hover:text-indigo-600"><i class="fas fa-edit"></i></button>
                            <button class="recipe-delete-button p-2 text-gray-500 hover:text-red-600"><i class="fas fa-trash"></i></button>
                        </div>
                    </div>
                `;
                recipesContainer.appendChild(recipeEl);

                recipeEl.addEventListener('click', (e) => {
                    if (e.target.closest('.recipe-edit-button')) {
                        showEditRecipeModal(recipe);
                    } else if (e.target.closest('.recipe-delete-button')) {
                        showDeleteConfirmationModal(recipe.id, 'recipe');
                    } else {
                        showViewRecipeModal(recipe);
                    }
                });
            });
        }

        // FUNÇÃO ATUALIZADA: Filtra as receitas com base na pesquisa e renderiza
        function filterAndRenderRecipes() {
            const searchTerm = recipeSearchInput.value.toLowerCase().trim();
            if (!searchTerm) {
                renderRecipes(allRecipes);
                return;
            }

            // Divide o termo de pesquisa em palavras-chave individuais e remove espaços em branco
            const keywords = searchTerm.split(' ').filter(word => word.length > 0);

            const filteredRecipes = allRecipes.filter(recipe => {
                // Combina o título e o conteúdo em um único texto para a pesquisa
                const recipeText = (recipe.title.toLowerCase() + ' ' + (recipe.content ? recipe.content.toLowerCase() : ''));

                // Verifica se TODAS as palavras-chave estão presentes no texto da receita
                return keywords.every(keyword => recipeText.includes(keyword));
            });

            renderRecipes(filteredRecipes);
        }

        // Abre o modal para adicionar ou editar uma receita
        function showEditRecipeModal(recipe = null) {
            recipeErrorMessage.classList.add('hidden');
            recipeFilesToUpload = [];
            recipeImagesToDelete = [];
            recipeImagePreviews.innerHTML = '';

            if (recipe) {
                editingRecipeId = recipe.id;
                recipeModalTitle.textContent = 'Editar Receita';
                editRecipeTitle.value = recipe.title;
                editRecipeContent.value = recipe.content;

                // Mostra as imagens existentes
                recipe.recipe_images.forEach(img => {
                    const previewEl = document.createElement('div');
                    previewEl.className = 'image-preview-item';
                    previewEl.innerHTML = `
                        <img src="${img.image_url}" />
                        <span class="remove-image-btn" data-url="${img.image_url}">&times;</span>
                    `;
                    recipeImagePreviews.appendChild(previewEl);
                });

            } else {
                editingRecipeId = null;
                recipeModalTitle.textContent = 'Adicionar Nova Receita';
                editRecipeTitle.value = '';
                editRecipeContent.value = '';
            }
            editRecipeModal.classList.remove('hidden');
            editRecipeModal.classList.add('flex');
        }

        // Fecha o modal de edição de receita
        function hideEditRecipeModal() {
            editRecipeModal.classList.add('hidden');
            editRecipeModal.classList.remove('flex');
            recipeImageUpload.value = ''; // Limpa o input de arquivo
        }

        // Abre o modal para visualizar uma receita
        function showViewRecipeModal(recipe) {
            viewRecipeTitle.textContent = recipe.title;
            viewRecipeContent.textContent = recipe.content;
            viewRecipeImagesContainer.innerHTML = '';

            if(recipe.recipe_images.length > 0) {
                recipe.recipe_images.forEach(img => {
                    const imgEl = document.createElement('img');
                    imgEl.src = img.image_url;
                    imgEl.className = 'rounded-lg shadow-md';
                    imgEl.style.width = '200px';
                    imgEl.style.height = '200px';
                    imgEl.style.objectFit = 'cover';
                    viewRecipeImagesContainer.appendChild(imgEl);
                });
            } else {
                viewRecipeImagesContainer.innerHTML = '<p class="text-gray-500">Nenhuma imagem para esta receita.</p>';
            }

            viewRecipeModal.classList.remove('hidden');
            viewRecipeModal.classList.add('flex');
        }

        function hideViewRecipeModal() {
            viewRecipeModal.classList.add('hidden');
            viewRecipeModal.classList.remove('flex');
        }

        // Salva a receita (cria ou atualiza)
        async function saveRecipe() {
            const title = editRecipeTitle.value.trim();
            const content = editRecipeContent.value.trim();
            const user = (await supabase.auth.getUser()).data.user;

            if (!title || !user) {
                recipeErrorMessage.textContent = 'O título é obrigatório.';
                recipeErrorMessage.classList.remove('hidden');
                return;
            }

            saveRecipeEditButton.disabled = true;
            saveRecipeEditButton.textContent = 'Salvando...';

            // 1. Upload de novas imagens
            const uploadedUrls = [];
            for (const file of recipeFilesToUpload) {
                const filePath = `${user.id}/${Date.now()}-${file.name}`;
                const { error } = await supabase.storage.from('recipes').upload(filePath, file);
                if (error) {
                    console.error('Erro no upload da imagem:', error);
                    continue;
                }
                const { data } = supabase.storage.from('recipes').getPublicUrl(filePath);
                uploadedUrls.push(data.publicUrl);
            }

            // 2. Deletar imagens marcadas para exclusão (do Storage e do DB)
            if (recipeImagesToDelete.length > 0) {
                 const filePaths = recipeImagesToDelete.map(url => {
                    const parts = url.split('/');
                    return parts.slice(parts.indexOf(user.id)).join('/');
                });

                await supabase.storage.from('recipes').remove(filePaths);
            }

            // 3. Salvar/Atualizar a receita
            if (editingRecipeId) { // Atualizando
                const { error } = await supabase
                    .from('recipes')
                    .update({ title, content })
                    .eq('id', editingRecipeId);

                if (error) console.error("Erro ao atualizar receita:", error);

            } else { // Criando
                const { data, error } = await supabase
                    .from('recipes')
                    .insert({ title, content, user_id: user.id })
                    .select()
                    .single();

                if (error) {
                    console.error("Erro ao criar receita:", error);
                } else {
                    editingRecipeId = data.id; // Usar o ID da nova receita
                }
            }

            // 4. Salvar as novas URLs de imagem
            if (uploadedUrls.length > 0 && editingRecipeId) {
                const imagesToInsert = uploadedUrls.map(url => ({
                    recipe_id: editingRecipeId,
                    image_url: url
                }));
                await supabase.from('recipe_images').insert(imagesToInsert);
            }

            saveRecipeEditButton.disabled = false;
            saveRecipeEditButton.textContent = 'Salvar';
            hideEditRecipeModal();
        }

        async function deleteRecipe(recipeId) {
             const { data: images, error: imagesError } = await supabase
                .from('recipe_images')
                .select('image_url')
                .eq('recipe_id', recipeId);

            if (imagesError) {
                console.error("Erro ao buscar imagens para deletar:", imagesError);
                return;
            }

            // Deleta imagens do Storage
            if (images && images.length > 0) {
                const user = (await supabase.auth.getUser()).data.user;
                const filePaths = images.map(img => {
                    const parts = img.image_url.split('/');
                    return parts.slice(parts.indexOf(user.id)).join('/');
                });
                await supabase.storage.from('recipes').remove(filePaths);
            }

            // Deleta a receita do banco de dados (o cascade cuidará das imagens)
            await supabase.from('recipes').delete().eq('id', recipeId);
        }


        // --- EVENT LISTENERS ---
        userListContainer.addEventListener('click', (e) => {
            const userCard = e.target.closest('button[data-email]');
            if (userCard) {
                selectedEmail = userCard.dataset.email;

                // Preenche os dados do usuário no formulário de login
                const userName = userCard.textContent;
                selectedUserName.textContent = userName;

                toggleUI(false, 'login');
                passwordInput.focus();
            }
        });

        loginButton.addEventListener('click', async () => {
            const email = selectedEmail;
            const password = passwordInput.value;

            const { error } = await supabase.auth.signInWithPassword({ email, password });

            if (error) {
                console.error(error);
            }
        });

        // NOVO: Adiciona a funcionalidade de login com a tecla Enter no campo de senha
        passwordInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault(); // Previne qualquer comportamento padrão do Enter
                loginButton.click(); // Simula o clique no botão de login
            }
        });

        resetPasswordButton.addEventListener('click', async () => {
            const email = selectedEmail;
            const redirectToUrl = `${window.location.origin}${window.location.pathname}`;

            const { error } = await supabase.auth.resetPasswordForEmail(email, {
                redirectTo: redirectToUrl
            });

            if (error) {
                console.error(error);
                if (error.status === 429) {
                    const waitTimeMatch = error.message.match(/after (\d+) seconds/);
                    const waitTime = waitTimeMatch ? parseInt(waitTimeMatch[1]) : 60;
                    showWaitModal(waitTime);
                }
            } else {
                resetEmailDisplay.textContent = email;
                resetPasswordModal.classList.remove('hidden');
                resetPasswordModal.classList.add('flex');
            }
        });

        backButton.addEventListener('click', () => {
            toggleUI(false, 'user-list');
            passwordInput.value = '';
        });

        backToInitialButton.addEventListener('click', () => {
            toggleUI(false, 'initial');
        });

        backButtonNewPassword.addEventListener('click', () => {
            toggleUI(false, 'initial');
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
        });


        updatePasswordButton.addEventListener('click', async () => {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (newPassword !== confirmPassword) {
                return;
            }
            if (newPassword.length < 6) {
                return;
            }

            const { error } = await supabase.auth.updateUser({ password: newPassword });

            if (error) {
                console.error(error);
            } else {
                newPasswordInput.value = '';
                confirmPasswordInput.value = '';
                setTimeout(() => {
                    window.location.href = window.location.origin + window.location.pathname;
                }, 1000);
            }
        });

        closeModalButton.addEventListener('click', () => {
            resetPasswordModal.classList.add('hidden');
            resetPasswordModal.classList.remove('flex');
        });

        closeWaitModalButton.addEventListener('click', () => {
            waitMessageModal.classList.add('hidden');
            waitMessageModal.classList.remove('flex');
        });

        // --- NOVOS EVENTOS PARA O MODAL DO PERFIL ---

        profileButton.addEventListener('click', async () => {
            const { data: { session } } = await supabase.auth.getSession();
            if (session) {
                profileModal.classList.remove('hidden');
                profileModal.classList.add('flex');
            }
        });

        closeProfileModalButton.addEventListener('click', () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
        });

        editProfileButton.addEventListener('click', async () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
            editProfileModal.classList.remove('hidden');
            editProfileModal.classList.add('flex');
            const { data, error } = await supabase.from('profiles').select('profile_name').eq('id', (await supabase.auth.getSession()).data.session.user.id).single();
            if (!error && data?.profile_name) {
                profileNameInput.value = data.profile_name;
            }
        });

        closeEditProfileModalButton.addEventListener('click', () => {
            editProfileModal.classList.add('hidden');
            editProfileModal.classList.remove('flex');
            profileModal.classList.remove('hidden');
            profileModal.classList.add('flex');
            uploadMessage.style.display = 'none';
        });

        changePasswordButton.addEventListener('click', async () => {
            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
            const { data: { session } } = await supabase.auth.getSession();
            const user = session?.user;

            if (user && user.email) {
                const redirectToUrl = `${window.location.origin}${window.location.pathname}`;

                try {
                    const { error } = await supabase.auth.resetPasswordForEmail(user.email, { redirectTo: redirectToUrl });

                    if (error) {
                         if (error.status === 429) {
                            const waitTimeMatch = error.message.match(/after (\d+) seconds/);
                            const waitTime = waitTimeMatch ? parseInt(waitTimeMatch[1]) : 60;
                            showWaitModal(waitTime);
                         }
                         console.error(error);
                    } else {
                        resetEmailDisplay.textContent = user.email;
                        resetPasswordModal.classList.remove('hidden');
                        resetPasswordModal.classList.add('flex');
                    }
                } catch (err) {
                     console.error(err);
                }
            }
        });

        logoutButtonModal.addEventListener('click', async () => {
            const { error } = await supabase.auth.signOut();
            if (error) {
                console.error('Erro ao sair:', error);
            } else {
                toggleUI(false, 'initial');
                passwordInput.value = '';
            }
        });

        uploadAvatarButton.addEventListener('click', async () => {
            const { data: { session } = {} } = await supabase.auth.getSession();
            const user = session?.user;

            if (!user) {
                uploadMessage.textContent = 'Erro: Nenhum usuário logado.';
                uploadMessage.style.display = 'block';
                return;
            }

            const file = avatarUploadInput.files[0];
            if (!file) {
                uploadMessage.textContent = 'Por favor, selecione um arquivo.';
                uploadMessage.style.display = 'block';
                return;
            }

            uploadMessage.textContent = 'Carregando...';
            uploadMessage.style.display = 'block';
            uploadMessage.classList.remove('text-red-700', 'text-green-700');
            uploadMessage.classList.add('text-gray-700');

            const filePath = `${user.id}/${file.name}`;
            const { error: uploadError } = await supabase.storage
                .from('avatars')
                .upload(filePath, file, {
                    cacheControl: '3600',
                    upsert: true
                });

            if (uploadError) {
                console.error(uploadError);
                uploadMessage.textContent = `Erro ao fazer upload: ${uploadError.message}`;
                uploadMessage.classList.add('text-red-700');
            } else {
                const { data: { publicUrl }, error: urlError } = supabase.storage
                    .from('avatars')
                    .getPublicUrl(filePath);

                if (urlError) {
                    console.error(urlError);
                    uploadMessage.textContent = 'Erro ao obter o URL da imagem.';
                    uploadMessage.classList.add('text-red-700');
                    return;
                }

                const { error: updateError } = await supabase
                    .from('profiles')
                    .update({ avatar_url: publicUrl })
                    .eq('id', user.id);

                if (updateError) {
                    console.error(updateError);
                    uploadMessage.textContent = `Erro ao atualizar perfil: ${updateError.message}`;
                    uploadMessage.classList.add('text-red-700');
                } else {
                    userAvatarLoggedIn.src = publicUrl;
                    uploadMessage.textContent = 'Upload bem-sucedido!';
                    uploadMessage.classList.add('text-green-700');
                    avatarUploadInput.value = null;
                    fetchUsers();
                }
            }
        });

        updateProfileButton.addEventListener('click', async () => {
            const { data: { session } = {} } = await supabase.auth.getSession();
            const user = session?.user;
            if (!user) {
                uploadMessage.textContent = 'Erro: Nenhum usuário logado.';
                uploadMessage.style.display = 'block';
                return;
            }
            const newProfileName = profileNameInput.value;
            if (!newProfileName) {
                uploadMessage.textContent = 'O nome do perfil não pode ser vazio.';
                uploadMessage.style.display = 'block';
                return;
            }

            uploadMessage.textContent = 'Atualizando nome do perfil...';
            uploadMessage.style.display = 'block';
            uploadMessage.classList.remove('text-red-700', 'text-green-700');
            uploadMessage.classList.add('text-gray-700');

            const { error: updateError } = await supabase
                .from('profiles')
                .update({ profile_name: newProfileName })
                .eq('id', user.id);

            if (updateError) {
                console.error(updateError);
                uploadMessage.textContent = `Erro ao atualizar nome do perfil: ${updateError.message}`;
                uploadMessage.classList.add('text-red-700');
            } else {
                userEmailDisplay.textContent = newProfileName;
                uploadMessage.textContent = 'Nome do perfil atualizado com sucesso!';
                uploadMessage.classList.add('text-green-700');
                fetchUsers();
            }
        });

        closeShoppingListButton.addEventListener('click', () => {
            shoppingListModal.classList.add('hidden');
            shoppingListModal.classList.remove('flex');
        });

        shoppingListContainer.addEventListener('click', (e) => {
            const deleteButton = e.target.closest('.delete-item-button');
            if (deleteButton) {
                const itemDiv = deleteButton.closest('.shopping-list-item');
                const itemId = itemDiv.dataset.id;
                showDeleteConfirmationModal(itemId, 'shopping_item');
            }
        });

        saveEditButton.addEventListener('click', async () => {
            if (editingItemId) {
                await updateItem(editingItemId, editItemInput.value.trim(), parseFloat(editItemQuantity.value), editItemUnit.value);
                closeEditItemModal();
            }
        });

        cancelEditButton.addEventListener('click', closeEditItemModal);
        closeEditItemModalButton.addEventListener('click', closeEditItemModal);

        filterAllButton.addEventListener('click', () => {
            currentFilter = 'all';
            setActiveFilter('all');
            fetchShoppingList();
        });

        filterToBuyButton.addEventListener('click', () => {
            currentFilter = 'to-buy';
            setActiveFilter('to-buy');
            fetchShoppingList();
        });

        filterBoughtButton.addEventListener('click', () => {
            currentFilter = 'bought';
            setActiveFilter('bought');
            fetchShoppingList();
        });

        function showAddItemModal() {
            addItemModal.classList.remove('hidden');
            addItemModal.classList.add('flex');
            addItemNameInput.focus();
        }

        function hideAddItemModal() {
            addItemModal.classList.add('hidden');
            addItemModal.classList.remove('flex');
        }

        showAddItemModalButton.addEventListener('click', showAddItemModal);
        closeAddItemModalButton.addEventListener('click', hideAddItemModal);
        addItemCancelButton.addEventListener('click', hideAddItemModal);
        addItemConfirmButton.addEventListener('click', addItem);

        function showDeleteConfirmationModal(id, type, name = '') {
            itemToDeleteInfo = { id, type };
            const messageEl = document.getElementById('delete-confirm-message');

            if (type === 'note') {
                messageEl.textContent = 'Tem a certeza que quer apagar esta nota?';
            } else if (type === 'custom_app_permanent') {
                messageEl.innerHTML = `Tem certeza que deseja excluir permanentemente o aplicativo "<strong>${name}</strong>"? <br>Esta ação não pode ser desfeita.`;
            } else if (type === 'price') {
                messageEl.textContent = 'Tem certeza que deseja excluir este preço?';
            } else if (type === 'recipe') {
                messageEl.textContent = 'Tem a certeza que quer apagar esta receita? Esta ação não pode ser desfeita.';
            }
            else { // Default for shopping list item
                messageEl.textContent = 'Tem certeza que deseja excluir este item da lista?';
            }
            deleteConfirmModal.classList.remove('hidden');
            deleteConfirmModal.classList.add('flex');
        }

        function hideDeleteConfirmationModal() {
            itemToDeleteInfo = null;
            deleteConfirmModal.classList.add('hidden');
            deleteConfirmModal.classList.remove('flex');
        }

        confirmDeleteButton.addEventListener('click', async () => {
            if (!itemToDeleteInfo) return;

            const { id, type } = itemToDeleteInfo;
            const user = (await supabase.auth.getUser()).data.user;

            if (type === 'note') {
                await deleteNote(id);
                fetchNotes();
            } else if (type === 'price') {
                await deletePrice(id);
                if (currentComparisonItemId) {
                    fetchItemPrices(currentComparisonItemId);
                }
            } else if (type === 'recipe') {
                await deleteRecipe(id);
            } else if (type === 'custom_app_permanent') {
                if (user) {
                    // 1. Delete from the database table
                    await supabase.from('custom_apps').delete().match({ id: id, user_id: user.id });

                    // 2. Remove from the 'removed_apps' list in preferences
                    const { data } = await supabase.from('profiles').select('preferences').eq('id', user.id).single();
                    const prefs = data?.preferences || {};
                    if (prefs.removed_apps) {
                        prefs.removed_apps = prefs.removed_apps.filter(appId => appId !== id);
                        await saveUserPreferences(prefs);
                    }

                    // 3. Refresh the trash list
                    await renderTrashList();
                }
            } else { // Default case for shopping list item
                await deleteItem(id);
            }

            hideDeleteConfirmationModal();
        });

        cancelDeleteButton.addEventListener('click', () => {
            hideDeleteConfirmationModal();
        });

        function showMoveItemConfirmationModal(itemId, newStatus) {
            mainHeader.style.zIndex = '20';
            itemToMove = { id: itemId, status: newStatus };
            if (newStatus === false) {
                moveItemConfirmMessage.textContent = "Deseja adicionar este item à lista 'Para comprar'?";
            } else {
                moveItemConfirmMessage.textContent = "Deseja mover este item para a lista de 'Comprados'?";
            }
            moveItemModal.classList.remove('hidden');
            moveItemModal.classList.add('flex');
        }

        function hideMoveItemConfirmationModal() {
            mainHeader.style.zIndex = '';
            itemToMove = null;
            moveItemModal.classList.add('hidden');
            moveItemModal.classList.remove('flex');
        }

        confirmMoveButton.addEventListener('click', () => {
            if (itemToMove) {
                toggleItemChecked(itemToMove.id, itemToMove.status);
            }
            hideMoveItemConfirmationModal();
        });

        cancelMoveButton.addEventListener('click', () => {
            hideMoveItemConfirmationModal();
        });

        // --- EVENTOS DO MODAL DE CONFIGURAÇÕES ---

        // Helper to close the settings modal
        function closeSettingsModal() {
            settingsModal.classList.add('hidden');
            settingsModal.classList.remove('flex');
            wallpaperUploadMessage.style.display = 'none';
        }

        // Opens the modal and prepares the temporary state for editing
        settingsButton.addEventListener('click', async () => {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { data, error } = await supabase.from('profiles').select('preferences').eq('id', user.id).single();

            // Store a deep copy of current preferences to edit and potentially save later
            tempPreferences = JSON.parse(JSON.stringify((error || !data) ? {} : data.preferences || {}));

            // Set input values based on the loaded preferences
            headerColorInput.value = tempPreferences.headerColor || '#FFFFFF';
            wallpaperColorInput.value = (tempPreferences.wallpaper?.type === 'color' ? tempPreferences.wallpaper.value : '#FFFFFF');
            textColorInput.value = tempPreferences.textColor || '#1f2937';

            profileModal.classList.add('hidden');
            profileModal.classList.remove('flex');
            settingsModal.classList.remove('hidden');
            settingsModal.classList.add('flex');
        });

        // Save the changes made in the modal
        saveSettingsButton.addEventListener('click', async () => {
            await saveUserPreferences(tempPreferences);
            closeSettingsModal();
        });

        // Discard changes and revert to how it was before opening the modal
        cancelSettingsButton.addEventListener('click', async () => {
            await loadUserPreferences(); // Easiest way to revert to saved state
            closeSettingsModal();
        });

        closeSettingsModalButton.addEventListener('click', async () => {
            await loadUserPreferences(); // Also treat 'X' as a cancel action
            closeSettingsModal();
        });

        // Live preview for header color
        headerColorInput.addEventListener('input', (e) => {
            const color = e.target.value;
            mainHeader.style.backgroundColor = color;
            appActionBar.style.backgroundColor = color; // Sincroniza a cor da faixa de ações
            tempPreferences.headerColor = color; // Update temp state
        });

        // Live preview for wallpaper color
        wallpaperColorInput.addEventListener('input', (e) => {
            const color = e.target.value;
            loggedInAppContainer.style.backgroundColor = color;
            loggedInAppContainer.style.backgroundImage = 'none';
            // Update temp state to reflect color selection
            tempPreferences.wallpaper = { type: 'color', value: color };
        });

        textColorInput.addEventListener('input', (e) => {
            const color = e.target.value;
            loggedInAppContainer.style.setProperty('--text-primary', color);
            tempPreferences.textColor = color; // Update temp state
        });

        // Handle image upload: updates temp state, but doesn't save permanently yet
        wallpaperUploadInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                wallpaperUploadMessage.textContent = 'Usuário não encontrado.';
                wallpaperUploadMessage.style.display = 'block';
                return;
            }

            wallpaperUploadMessage.textContent = 'Carregando imagem...';
            wallpaperUploadMessage.style.display = 'block';
            wallpaperUploadMessage.classList.remove('text-red-700', 'text-green-700');

            const filePath = `${user.id}/${file.name}`;

            const { error: uploadError } = await supabase.storage
                .from('wallpapers')
                .upload(filePath, file, { cacheControl: '3600', upsert: true });

            if (uploadError) {
                wallpaperUploadMessage.textContent = `Erro no upload: ${uploadError.message}`;
                wallpaperUploadMessage.classList.add('text-red-700');
                console.error(uploadError);
                return;
            }

            const { data } = supabase.storage.from('wallpapers').getPublicUrl(filePath);
            const publicUrl = `${data.publicUrl}?t=${new Date().getTime()}`;

            // Update temp state with new image wallpaper
            tempPreferences.wallpaper = { type: 'image', value: publicUrl };

            // Apply the change for live preview
            applyPreferences(tempPreferences);

            wallpaperUploadMessage.textContent = 'Imagem carregada! Clique em Salvar.';
            wallpaperUploadMessage.classList.add('text-green-700');
            wallpaperUploadInput.value = '';
        });

        // Resets the temporary preferences for a live preview of removal
        removeWallpaperButton.addEventListener('click', async () => {
            tempPreferences = {};
            applyPreferences(null); // Visually reset to defaults
            wallpaperColorInput.value = '#FFFFFF';
            headerColorInput.value = '#FFFFFF';
            textColorInput.value = '#1f2937';
        });

        closeNotesModalButton.addEventListener('click', () => {
            notesModal.classList.add('hidden');
            notesModal.classList.remove('flex');
        });

        showAddNoteModalButton.addEventListener('click', () => {
            showEditNoteModal(null, '', '', null, null, false);
        });

        notesContainer.addEventListener('click', (e) => {
            const target = e.target;
            const noteEl = target.closest('.note-item');
            if (!noteEl) return;

            const noteId = noteEl.dataset.id;
            const title = noteEl.dataset.title;
            const content = noteEl.dataset.content;
            const startDate = noteEl.dataset.startDate;
            const endDate = noteEl.dataset.endDate;
            const isFixed = noteEl.dataset.isFixed === 'true';

            const deleteButton = target.closest('.note-delete-button');
            const editButton = target.closest('.note-edit-button');

            if (editButton) {
                showEditNoteModal(noteId, title, content, startDate, endDate, isFixed);
            } else if (deleteButton) {
                showDeleteConfirmationModal(noteId, 'note');
            } else {
                showViewNoteModal(title, content);
            }
        });

        closeEditNoteModalButton.addEventListener('click', closeEditNoteModal);
        cancelNoteEditButton.addEventListener('click', closeEditNoteModal);
        saveNoteEditButton.addEventListener('click', async () => {
            noteErrorMessage.classList.add('hidden');
            const newTitle = editNoteTitleInput.value.trim();
            const newContent = editNoteInput.value.trim();
            const isFixed = editNoteIsFixedCheckbox.checked;
            const startDate = !isFixed && editNoteStartDateInput.value ? editNoteStartDateInput.value : null;
            const endDate = !isFixed && editNoteEndDateInput.value ? editNoteEndDateInput.value : null;

            if (!isFixed && (!startDate || !endDate)) {
                noteErrorMessage.textContent = 'Por favor, defina uma data de início e fim, ou marque a nota como fixa.';
                noteErrorMessage.classList.remove('hidden');
                return;
            }

            if (!newTitle && !newContent) {
                noteErrorMessage.textContent = 'A nota precisa de um título ou conteúdo para ser salva.';
                noteErrorMessage.classList.remove('hidden');
                return;
            }

            if (editingNoteId) {
                await updateNote(editingNoteId, newTitle, newContent, startDate, endDate, isFixed);
            } else {
                await addNote(newTitle, newContent, startDate, endDate, isFixed);
            }
            closeEditNoteModal();
        });

        closeViewNoteModalButton.addEventListener('click', closeViewNoteModal);

        editNoteIsFixedCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            editNoteStartDateInput.disabled = isChecked;
            editNoteEndDateInput.disabled = isChecked;
            if (isChecked) {
                editNoteStartDateInput.value = '';
                editNoteEndDateInput.value = '';
            }
        });

        // NOVO: Funções e eventos para o modal de filtro de notas
        function showNoteFilterModal() {
            noteFilterModal.classList.remove('hidden');
            noteFilterModal.classList.add('flex');
        }

        function hideNoteFilterModal() {
            noteFilterModal.classList.add('hidden');
            noteFilterModal.classList.remove('flex');
        }

        function updateNoteFilterDisplay(filterValue) {
            let displayText = "Notas de Hoje"; // Default
            switch (filterValue) {
                case 'active':
                    displayText = 'Notas de Hoje';
                    break;
                case 'futuras':
                    displayText = 'Notas Futuras';
                    break;
                case 'antigas':
                    displayText = 'Notas Antigas';
                    break;
                case 'fixed':
                    displayText = 'Notas Fixas';
                    break;
                case 'all':
                    displayText = 'Ver Tudo';
                    break;
            }
            currentNoteFilterDisplay.textContent = displayText;
        }

        function selectNoteFilter(filterValue) {
            currentNoteFilter = filterValue;
            updateNoteFilterDisplay(filterValue);
            fetchNotes();
            hideNoteFilterModal();
        }

        showNoteFilterModalButton.addEventListener('click', showNoteFilterModal);
        closeNoteFilterModalButton.addEventListener('click', hideNoteFilterModal);

        noteFilterOptions.forEach(button => {
            button.addEventListener('click', () => {
                const filterValue = button.dataset.filter;
                selectNoteFilter(filterValue);
            });
        });


        // --- LÓGICA DE APLICATIVOS PERSONALIZADOS E FIXOS ---
        async function renderApps(appsToRender, appOrder) {
            buttonGridContainer.innerHTML = '';

            const sortedApps = [...appsToRender].sort((a, b) => {
                const indexA = appOrder.indexOf(a.id);
                const indexB = appOrder.indexOf(b.id);

                if (indexA !== -1 && indexB !== -1) {
                    return indexA - indexB;
                }
                if (indexA !== -1) return -1;
                if (indexB !== -1) return 1;
                return a.title.localeCompare(b.title);
            });

            sortedApps.forEach(app => {
                const appContainer = document.createElement('div');
                appContainer.className = 'app-container';
                appContainer.dataset.id = app.id;
                appContainer.dataset.title = app.title;
                appContainer.dataset.isFixed = app.isFixed;
                if (app.url) appContainer.dataset.url = app.url;
                if (app.icon_class) appContainer.dataset.iconClass = app.icon_class;
                if (app.bg_color) appContainer.dataset.bgColor = app.bg_color;
                if (app.icon_color) appContainer.dataset.iconColor = app.icon_color;

                const iconClass = app.icon_class || 'fas fa-link';
                const styleParts = [];
                if (app.bg_color) {
                    styleParts.push(`background-color: ${app.bg_color}`);
                }
                const iconStyleParts = [];
                if (app.icon_color) {
                    iconStyleParts.push(`color: ${app.icon_color}`);
                }
                const gridItemStyle = styleParts.join('; ');
                const iconStyle = iconStyleParts.join('; ');

                appContainer.innerHTML = `
                    <div class="grid-item" draggable="true" style="${gridItemStyle}">
                        <i class="${iconClass} grid-item-icon" style="${iconStyle}"></i>
                    </div>
                    <span class="grid-item-label text-theme noselect">${app.title}</span>
                `;

                const gridItem = appContainer.querySelector('.grid-item');
                gridItem.addEventListener('click', () => {
                    if (isDragging) return;
                    showAppActionBar(app); // Alterado para chamar a nova função
                });

                buttonGridContainer.appendChild(appContainer);
            });
        }

        async function fetchAndRenderApps(userId) {
            if (!userId) return;

            const [profileResponse, appOrderResponse] = await Promise.all([
                supabase.from('profiles').select('preferences').eq('id', userId).single(),
                supabase.from('user_app_order').select('app_ids').eq('user_id', userId).single()
            ]);

            const { data: profile, error: profileError } = profileResponse;
            const preferences = profileError ? {} : profile.preferences || {};
            const removedApps = preferences.removed_apps || [];
            const appCustomizations = preferences.app_customizations || {};

            const { data: appOrderData, error: appOrderError } = appOrderResponse;
            const appOrder = appOrderError ? [] : appOrderData.app_ids || [];

            const fixedApps = fixedAppsMasterList.map(app => {
                const customization = appCustomizations[app.id] || {};
                return {
                    ...app,
                    title: customization.title || app.title,
                    icon_class: customization.icon_class || app.iconClass,
                    bg_color: customization.bg_color, // Pode ser nulo, tratado na renderização
                    icon_color: customization.icon_color, // Pode ser nulo, tratado na renderização
                };
            });

            const { data: customApps, error: fetchAppsError } = await supabase
                .from('custom_apps')
                .select('*')
                .eq('user_id', userId);

            if (fetchAppsError) {
                console.error('Erro ao buscar apps existentes:', fetchAppsError);
            }

            const allAvailableApps = [...fixedApps, ...(customApps || [])];
            const visibleApps = allAvailableApps.filter(app => !removedApps.includes(app.id));

            renderApps(visibleApps, appOrder);
        }

        async function saveAppOrder(userId) {
            if (!userId) return;
            const appIds = [...buttonGridContainer.children].map(appContainer => appContainer.dataset.id);

            const { error } = await supabase
                .from('user_app_order')
                .upsert({ user_id: userId, app_ids: appIds }, { onConflict: 'user_id' });

            if (error) {
                console.error('Erro ao salvar a ordem dos apps:', error);
            }
        }

        function showAppActionBar(app) {
            // Armazena os dados do app diretamente na faixa de ações
            appActionBar.dataset.id = app.id;
            appActionBar.dataset.title = app.title;
            appActionBar.dataset.url = app.url || '';
            appActionBar.dataset.isFixed = app.isFixed;
            appActionBar.dataset.iconClass = app.icon_class || '';
            appActionBar.dataset.bgColor = app.bg_color || '';
            appActionBar.dataset.iconColor = app.icon_color || '';

            // NOVO: Lógica para destacar o ícone selecionado
            // 1. Remove a seleção de qualquer outro item
            const currentlySelected = buttonGridContainer.querySelector('.grid-item.selected');
            if (currentlySelected) {
                currentlySelected.classList.remove('selected');
            }

            // 2. Adiciona a seleção ao item clicado
            const appElement = buttonGridContainer.querySelector(`.app-container[data-id="${app.id}"]`);
            if (appElement) {
                const gridItem = appElement.querySelector('.grid-item');
                if (gridItem) {
                    gridItem.classList.add('selected');
                }
            }


            // Mostra a faixa de ações
            appActionBar.classList.remove('hidden');
            appActionBar.classList.add('flex');
        }

        function hideAppActionBar() {
            // Esconde a faixa de ações
            appActionBar.classList.add('hidden');
            appActionBar.classList.remove('flex');

            // NOVO: Remove a seleção de qualquer item que a tenha
            const currentlySelected = buttonGridContainer.querySelector('.grid-item.selected');
            if (currentlySelected) {
                currentlySelected.classList.remove('selected');
            }
        }

        function showAddAppModal(appData = null) {
            const urlInputContainer = appUrlInput.parentElement;

            if (appData) { // Modo de Edição
                addAppModal.dataset.editId = appData.id;
                addAppModal.dataset.isFixed = appData.isFixed;
                document.getElementById('add-app-title').textContent = 'Editar Aplicativo';
                appTitleInput.value = appData.title;
                appUrlInput.value = appData.url || '';

                if (appData.isFixed) {
                    urlInputContainer.classList.add('hidden');
                } else {
                    urlInputContainer.classList.remove('hidden');
                }

                const selectedIcon = appData.icon_class || 'fas fa-link';
                appIconClassInput.value = selectedIcon;
                appBgColorInput.value = appData.bg_color || '#333333';
                appIconColorInput.value = appData.icon_color || '#FFFFFF';
                renderIconPicker(selectedIcon);

            } else { // Modo de Adição
                addAppModal.removeAttribute('data-edit-id');
                addAppModal.removeAttribute('data-is-fixed');
                document.getElementById('add-app-title').textContent = 'Adicionar Aplicativo';
                appTitleInput.value = '';
                appUrlInput.value = '';
                urlInputContainer.classList.remove('hidden');

                const defaultIcon = 'fas fa-link';
                appIconClassInput.value = defaultIcon;
                appBgColorInput.value = '#333333';
                appIconColorInput.value = '#FFFFFF';
                renderIconPicker(defaultIcon);
            }
            addAppModal.classList.remove('hidden');
            addAppModal.classList.add('flex');
            appTitleInput.focus();
        }

        function hideAddAppModal() {
            addAppModal.classList.add('hidden');
            addAppModal.classList.remove('flex');
            addAppModal.removeAttribute('data-edit-id');
            appTitleInput.value = '';
            appUrlInput.value = '';
        }

        async function saveAppDetails() {
            const user = (await supabase.auth.getUser()).data.user;
            if (!user) return;

            const appId = addAppModal.dataset.editId;
            const isFixed = addAppModal.dataset.isFixed === 'true';

            const appDetails = {
                title: appTitleInput.value.trim(),
                url: appUrlInput.value.trim(),
                icon_class: appIconClassInput.value,
                bg_color: appBgColorInput.value,
                icon_color: appIconColorInput.value,
            };

            if (isFixed) {
                // Salvar personalização para apps fixos nas preferências do perfil
                const { data, error } = await supabase.from('profiles').select('preferences').eq('id', user.id).single();
                if (error && error.code !== 'PGRST116') {
                    console.error("Erro ao buscar perfil:", error);
                    return;
                }

                const prefs = data?.preferences || {};
                if (!prefs.app_customizations) {
                    prefs.app_customizations = {};
                }
                prefs.app_customizations[appId] = {
                    title: appDetails.title,
                    icon_class: appDetails.icon_class,
                    bg_color: appDetails.bg_color,
                    icon_color: appDetails.icon_color,
                };

                await saveUserPreferences(prefs);

            } else {
                // Lógica original para apps personalizados
                if (!appDetails.title || !appDetails.url) {
                    console.error('Título e URL são obrigatórios para apps personalizados.');
                    return;
                }

                if (appId) { // Editar app personalizado
                    const { error } = await supabase.from('custom_apps').update(appDetails).match({ id: appId, user_id: user.id });
                    if (error) console.error('Erro ao atualizar app personalizado:', error);
                } else { // Adicionar novo app personalizado
                    const { error } = await supabase.from('custom_apps').insert({ ...appDetails, user_id: user.id });
                    if (error) console.error('Erro ao criar app personalizado:', error);
                }
            }

            await fetchAndRenderApps(user.id);
            hideAddAppModal();
        }

        async function deleteCustomApp(appId) {
            const user = (await supabase.auth.getUser()).data.user;
            if (!user) return;

            const { error } = await supabase.from('custom_apps').delete().match({ id: appId, user_id: user.id });

            if (error) {
                console.error('Erro ao deletar aplicativo:', error);
            } else {
                await fetchAndRenderApps(user.id);
            }
        }

        function showEditFixedAppModal(appId, currentTitle) {
            editFixedAppModal.dataset.id = appId;
            fixedAppNameInput.value = currentTitle;
            editFixedAppModal.classList.remove('hidden');
            editFixedAppModal.classList.add('flex');
            fixedAppNameInput.focus();
        }

        function hideEditFixedAppModal() {
            editFixedAppModal.classList.add('hidden');
            editFixedAppModal.classList.remove('flex');
        }

        async function renderTrashList() {
            const user = (await supabase.auth.getUser()).data.user;
            if (!user) return;

            // Fetch preferences and custom apps in parallel
            const [profileResponse, customAppsResponse] = await Promise.all([
                supabase.from('profiles').select('preferences').eq('id', user.id).single(),
                supabase.from('custom_apps').select('*').eq('user_id', user.id)
            ]);

            const { data: profileData, error: profileError } = profileResponse;
            if (profileError && profileError.code !== 'PGRST116') { // PGRST116 means no rows found, which is fine
                console.error('Error fetching profile for trash:', profileError);
                return;
            }

            const prefs = profileData?.preferences || {};
            const removedIds = prefs.removed_apps || [];
            const appCustomizations = prefs.app_customizations || {};

            trashListContainer.innerHTML = '';
            if (removedIds.length === 0) {
                trashListContainer.innerHTML = '<p class="text-center text-gray-500">O baú está vazio.</p>';
                return;
            }

            // Prepare the list of all possible apps (fixed and custom)
            const fixedApps = fixedAppsMasterList.map(app => {
                const customization = appCustomizations[app.id] || {};
                return {
                    ...app,
                    title: customization.title || app.title,
                    icon_class: customization.icon_class || app.iconClass,
                };
            });

            const { data: customApps, error: customAppsError } = customAppsResponse;
            if (customAppsError) {
                console.error('Error fetching custom apps for trash:', customAppsError);
            }

            const allApps = [...fixedApps, ...(customApps || [])];

            // Filter to get only the removed apps
            const removedApps = allApps.filter(app => removedIds.includes(app.id));

            removedApps.forEach(app => {
                const itemEl = document.createElement('div');
                itemEl.className = 'flex items-center justify-between p-3 bg-white rounded-lg shadow';

                // Define the buttons based on whether the app is fixed or custom
                const buttonsHtml = `
                    <div class="flex items-center space-x-2">
                        <button data-id="${app.id}" class="restore-app-button w-10 h-10 flex items-center justify-center rounded-full bg-green-500 text-white hover:bg-green-600 transition-colors" title="Tirar do baú">
                            <i class="fas fa-undo"></i>
                        </button>
                        ${!app.isFixed ? `<button data-id="${app.id}" data-title="${app.title}" class="delete-app-permanently-button w-10 h-10 flex items-center justify-center rounded-full bg-red-500 text-white hover:bg-red-600 transition-colors" title="Excluir Permanentemente">
                            <i class="fas fa-trash"></i>
                        </button>` : ''}
                    </div>
                `;

                itemEl.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <i class="${app.icon_class || app.iconClass} text-2xl text-gray-600"></i>
                        <span class="font-semibold text-theme">${app.title}</span>
                    </div>
                    ${buttonsHtml}
                `;
                trashListContainer.appendChild(itemEl);
            });
        }


        // --- LÓGICA DE ARRASTAR E SOLTAR (DRAG AND DROP) ---
        let draggedItem = null;

        buttonGridContainer.addEventListener('dragstart', e => {
            const iconElement = e.target.closest('.grid-item');
            if (!iconElement) return; // O arrasto não começou no ícone

            const draggable = iconElement.closest('.app-container');
            if (draggable) {
                isDragging = true;
                draggedItem = draggable;
                // Adiciona um pequeno atraso para evitar que o elemento pisque
                setTimeout(() => {
                    draggable.classList.add('dragging');
                }, 0);
            }
        });

        buttonGridContainer.addEventListener('dragend', async e => {
            const iconElement = e.target.closest('.grid-item');
            if (!iconElement) return;

            const draggable = iconElement.closest('.app-container');
            if (draggable) {
                isDragging = false;
                draggable.classList.remove('dragging');
                draggedItem = null;

                const { data: { user } } = await supabase.auth.getUser();
                if (user) {
                    await saveAppOrder(user.id);
                }
            }
        });

        buttonGridContainer.addEventListener('dragover', e => {
            e.preventDefault();
            const afterElement = getDragAfterElement(buttonGridContainer, e.clientY);
            const draggable = document.querySelector('.dragging');
            if (draggable) {
                if (afterElement == null) {
                    buttonGridContainer.appendChild(draggable);
                } else {
                    buttonGridContainer.insertBefore(draggable, afterElement);
                }
            }
        });

        function getDragAfterElement(container, y) {
            const draggableElements = [...container.querySelectorAll('.app-container:not(.dragging)')];

            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        // --- NOVOS EVENTOS DE APLICATIVOS ---
        addAppButton.addEventListener('click', () => showAddAppModal());
        closeAddAppModalButton.addEventListener('click', hideAddAppModal);
        cancelAddAppButton.addEventListener('click', hideAddAppModal);
        saveAppButton.addEventListener('click', saveAppDetails);

        openAppButton.addEventListener('click', () => {
            const appId = appActionBar.dataset.id;
            const appUrl = appActionBar.dataset.url;
            hideAppActionBar();

            if (appId === 'shopping-list') {
                shoppingListModal.classList.remove('hidden');
                shoppingListModal.classList.add('flex');
                setActiveFilter(currentFilter);
                fetchShoppingList();
            } else if (appId === 'notes-app') {
                notesModal.classList.remove('hidden');
                notesModal.classList.add('flex');
                updateNoteFilterDisplay(currentNoteFilter);
                fetchNotes();
            } else if (appId === 'recipes-app') { // NOVO
                recipesModal.classList.remove('hidden');
                recipesModal.classList.add('flex');
                fetchRecipes();
            } else if (appUrl) {
                window.open(appUrl, '_blank');
            }
        });

        editAppButton.addEventListener('click', () => {
            const appData = {
                id: appActionBar.dataset.id,
                title: appActionBar.dataset.title,
                url: appActionBar.dataset.url,
                isFixed: appActionBar.dataset.isFixed === 'true',
                icon_class: appActionBar.dataset.iconClass,
                bg_color: appActionBar.dataset.bgColor,
                icon_color: appActionBar.dataset.iconColor
            };

            hideAppActionBar();
            showAddAppModal(appData);
        });

        deleteAppButton.addEventListener('click', async () => {
            const appId = appActionBar.dataset.id;
            const user = (await supabase.auth.getUser()).data.user;
            if (!user) return;

            hideAppActionBar();

            // Unify behavior: always move to trash (add to removed_apps)
            const { data } = await supabase.from('profiles').select('preferences').eq('id', user.id).single();
            const prefs = data?.preferences || {};
            const removed = prefs.removed_apps || [];

            if (!removed.includes(appId)) {
                removed.push(appId);
                prefs.removed_apps = removed;
                await saveUserPreferences(prefs);
                await fetchAndRenderApps(user.id);
            }
        });

        closeAppModalButton.addEventListener('click', hideAppActionBar);

        saveEditFixedAppButton.addEventListener('click', async () => {
            const appId = editFixedAppModal.dataset.id;
            const newName = fixedAppNameInput.value.trim();
            const user = (await supabase.auth.getUser()).data.user;
            if (!newName || !user) return;

            const { data } = await supabase.from('profiles').select('preferences').eq('id', user.id).single();
            const prefs = data?.preferences || {};
            if (!prefs.app_names) prefs.app_names = {};
            prefs.app_names[appId] = newName;

            await saveUserPreferences(prefs);
            await fetchAndRenderApps(user.id);
            hideEditFixedAppModal();
        });
        cancelEditFixedAppButton.addEventListener('click', hideEditFixedAppModal);

        trashBinButton.addEventListener('click', () => {
            renderTrashList();
            trashBinModal.classList.remove('hidden');
            trashBinModal.classList.add('flex');
        });
        closeTrashBinModal.addEventListener('click', () => {
            trashBinModal.classList.add('hidden');
            trashBinModal.classList.remove('flex');
        });
        trashListContainer.addEventListener('click', async (e) => {
            const restoreButton = e.target.closest('.restore-app-button');
            const deletePermanentlyButton = e.target.closest('.delete-app-permanently-button');

            const user = (await supabase.auth.getUser()).data.user;
            if (!user) return;

            if (restoreButton) {
                const appId = restoreButton.dataset.id;
                const { data } = await supabase.from('profiles').select('preferences').eq('id', user.id).single();
                const prefs = data?.preferences || {};
                let removed = prefs.removed_apps || [];
                prefs.removed_apps = removed.filter(id => id !== appId);

                await saveUserPreferences(prefs);
                await fetchAndRenderApps(user.id);
                await renderTrashList();
            } else if (deletePermanentlyButton) {
                const appId = deletePermanentlyButton.dataset.id;
                const appTitle = deletePermanentlyButton.dataset.title;
                showDeleteConfirmationModal(appId, 'custom_app_permanent', appTitle);
            }
        });

        // Event Listeners para Comparação de Preços
        closePriceComparisonModalButton.addEventListener('click', hidePriceComparisonModal);
        addPriceButton.addEventListener('click', addPrice);
        cancelEditPriceButton.addEventListener('click', hideEditPriceModal);
        closeEditPriceModalXButton.addEventListener('click', hideEditPriceModal);

        priceListContainer.addEventListener('click', (e) => {
            const editButton = e.target.closest('.edit-price-button');
            if (editButton) {
                const priceId = editButton.dataset.priceId;
                const location = editButton.dataset.location;
                const price = editButton.dataset.price;
                showEditPriceModal(priceId, location, price);
            }

            const deleteButton = e.target.closest('.delete-price-button');
            if (deleteButton) {
                const priceId = deleteButton.dataset.priceId;
                showDeleteConfirmationModal(priceId, 'price');
            }
        });

        saveEditPriceButton.addEventListener('click', async () => {
            const newLocation = editPriceLocationInput.value.trim();
            const newPrice = parseFloat(editPriceValueInput.value);
            if(editingPriceId && newLocation && !isNaN(newPrice)) {
                await updatePrice(editingPriceId, newLocation, newPrice);
                hideEditPriceModal();
            }
        });

        // --- NOVO: EVENT LISTENERS DO APP DE RECEITAS ---
        recipeSearchInput.addEventListener('input', filterAndRenderRecipes);

        closeRecipesModal.addEventListener('click', () => {
            recipesModal.classList.add('hidden');
            recipesModal.classList.remove('flex');
        });
        showAddRecipeModalButton.addEventListener('click', () => showEditRecipeModal());
        closeEditRecipeModal.addEventListener('click', hideEditRecipeModal);
        cancelRecipeEditButton.addEventListener('click', hideEditRecipeModal);
        saveRecipeEditButton.addEventListener('click', saveRecipe);
        closeViewRecipeModal.addEventListener('click', hideViewRecipeModal);

        recipeImageUpload.addEventListener('change', async (e) => {
            recipeImagePreviews.innerHTML = '';
            recipeFilesToUpload = [];

            for (const file of e.target.files) {
                const resizedBlob = await resizeImage(file, 200, 200);
                recipeFilesToUpload.push(resizedBlob);

                const previewEl = document.createElement('div');
                previewEl.className = 'image-preview-item';
                previewEl.innerHTML = `<img src="${URL.createObjectURL(resizedBlob)}" />`;
                recipeImagePreviews.appendChild(previewEl);
            }
        });

        recipeImagePreviews.addEventListener('click', (e) => {
            if (e.target.classList.contains('remove-image-btn')) {
                const url = e.target.dataset.url;
                if (url) {
                    recipeImagesToDelete.push(url);
                    e.target.parentElement.remove();
                }
            }
        });


        // --- VERIFICAÇÃO DE ESTADO DE AUTENTICAÇÃO E URL ---
        supabase.auth.onAuthStateChange((event, session) => {
            if (session) {
                // Só inicializa a app por completo se ainda não tiver sido feito para esta sessão.
                // Isto evita que a UI seja recarregada ao trocar de abas.
                if (!isAppInitialized) {
                    isAppInitialized = true;

                    loadUserProfile(session.user);
                    loadUserPreferences();
                    toggleUI(true); // Esta chamada agora é segura dentro do bloco condicional

                    // --- Configura todas as subscrições em tempo real ---
                    if (customAppsSubscription) supabase.removeChannel(customAppsSubscription);
                    customAppsSubscription = supabase.channel('public:custom_apps')
                        .on('postgres_changes', { event: '*', schema: 'public', table: 'custom_apps', filter: `user_id=eq.${session.user.id}` }, payload => {
                            fetchAndRenderApps(session.user.id);
                        })
                        .subscribe();

                    if (notesSubscription) supabase.removeChannel(notesSubscription);
                    notesSubscription = supabase.channel('public:notes')
                        .on('postgres_changes', { event: '*', schema: 'public', table: 'notes', filter: `user_id=eq.${session.user.id}` }, payload => {
                            fetchNotes();
                        })
                        .subscribe();

                    // Subscrições para Receitas
                    if (recipesSubscription) supabase.removeChannel(recipesSubscription);
                    recipesSubscription = supabase.channel('public:recipes')
                        .on('postgres_changes', { event: '*', schema: 'public', table: 'recipes' }, payload => fetchRecipes())
                        .subscribe();

                    if (recipeImagesSubscription) supabase.removeChannel(recipeImagesSubscription);
                    recipeImagesSubscription = supabase.channel('public:recipe_images')
                        .on('postgres_changes', { event: '*', schema: 'public', table: 'recipe_images' }, payload => fetchRecipes())
                        .subscribe();

                    // --- Busca inicial de dados ---
                    fetchAndRenderApps(session.user.id);
                    fetchShoppingList();
                }
            } else { // Sem sessão ou o usuário saiu
                isAppInitialized = false; // Reinicia a flag

                // Limpa todas as subscrições para evitar vazamentos de memória
                if (notesSubscription) supabase.removeChannel(notesSubscription);
                if (customAppsSubscription) supabase.removeChannel(customAppsSubscription);
                if (priceSubscription) supabase.removeChannel(priceSubscription);
                if (recipesSubscription) supabase.removeChannel(recipesSubscription);
                if (recipeImagesSubscription) supabase.removeChannel(recipeImagesSubscription);
                notesSubscription = null;
                customAppsSubscription = null;
                priceSubscription = null;
                recipesSubscription = null;
                recipeImagesSubscription = null;

                // Determina qual vista mostrar
                const params = new URLSearchParams(window.location.hash.substring(1));
                if (params.get('type') === 'recovery') {
                    toggleUI(false, 'new-password');
                } else {
                    toggleUI(false, 'initial');
                }
            }
        });

        fetchUsers();

        // Adiciona um listener para o evento beforeunload para pedir confirmação antes de atualizar a página
        window.addEventListener('beforeunload', function (e) {
            // Cancela o evento
            e.preventDefault();
            // O Chrome exige que returnValue seja definido
            e.returnValue = '';
        });

        showProfilesButton.addEventListener('click', () => {
            toggleUI(false, 'user-list');
        });
    </script>
</body>
</html>
