<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Login</title>
    <!-- Carrega o Tailwind CSS para estilização rápida e responsiva -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Importa a fonte Inter para uma aparência moderna */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap');

        body {
            font-family: 'Inter', sans-serif;
            @apply bg-gray-100;
        }

        /* Remove o destaque azul ao tocar em botões em dispositivos móveis */
        button {
            -webkit-tap-highlight-color: transparent;
        }
    </style>
</head>
<body>
    <!-- Container principal que centraliza o conteúdo na tela -->
    <div id="main-container" class="flex items-center justify-center min-h-screen p-4">

        <div id="app" class="w-full max-w-md">
            <!-- Formulário de Login com Email e Senha -->
            <div id="login-form-container" class="bg-white p-8 rounded-xl shadow-lg w-full max-w-sm space-y-6">
                <h2 class="text-center font-bold text-gray-800 text-3xl">Login</h2>

                <!-- Campo do Email -->
                <div>
                    <label for="email" class="block text-lg font-medium text-gray-700 mb-1">Email</label>
                    <input type="email" id="email" autocomplete="email" class="block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg">
                </div>

                <!-- Campo da Senha -->
                <div>
                    <label for="password" class="block text-lg font-medium text-gray-700 mb-1">Senha</label>
                    <input type="password" id="password" autocomplete="current-password" class="block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg">
                </div>

                <!-- Botão de Entrar -->
                <button id="login-button" class="w-full px-4 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-bold rounded-md shadow-lg hover:shadow-xl focus:outline-none transition-all text-lg">
                    Entrar
                </button>

                <!-- Botão para redefinir senha -->
                <button id="reset-password-button" class="!mt-2 w-full text-sm text-center text-gray-600 hover:text-indigo-600 hover:underline focus:outline-none transition-colors duration-200">
                    Esqueci minha senha
                </button>
            </div>

            <!-- Formulário para Definir Nova Senha (após recuperação) -->
            <div id="new-password-container" class="hidden space-y-6 bg-white p-6 rounded-xl shadow-lg w-full max-w-sm">
                <h2 class="text-center font-semibold text-gray-700 text-xl">Defina sua nova senha</h2>
                <div class="relative">
                    <label for="new-password" class="block text-sm font-medium text-gray-700">Nova Senha</label>
                    <input type="password" id="new-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="relative">
                    <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirme a Senha</label>
                    <input type="password" id="confirm-password" class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <button id="update-password-button" class="w-full px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all">
                    Confirmar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal para confirmação de redefinição de senha -->
    <div id="reset-password-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-gray-800">Verifique seu Email</h3>
            <p class="text-gray-700">Um link para redefinição de senha foi enviado para <span id="reset-email-display" class="font-semibold text-indigo-600"></span>. Siga as instruções para criar uma nova senha.</p>
            <button id="close-modal-button" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <!-- Modal de Mensagem de Espera (limite de taxa de emails) -->
    <div id="wait-message-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center p-4 z-50">
        <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-sm w-full text-center space-y-4">
            <h3 class="text-xl font-bold text-gray-800">Aguarde</h3>
            <p class="text-gray-700">É necessário aguardar para enviar outro e-mail. Por favor, aguarde <span id="wait-time" class="font-semibold text-indigo-600"></span> segundos.</p>
            <button id="close-wait-modal" class="px-6 py-2 bg-indigo-600 text-white font-semibold rounded-md hover:bg-indigo-700">OK</button>
        </div>
    </div>

    <script type="module">
        // Importa o cliente do Supabase
        import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';

        // --- CONFIGURAÇÃO DO SUPABASE ---
        // É crucial substituir os valores abaixo pelas suas chaves do projeto Supabase.
        const SUPABASE_URL = 'https://xukxlgorxpusgiyiesjy.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh1a3hsZ29yeHB1c2dpeWllc2p5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwMjA4NTUsImV4cCI6MjA3NTU5Njg1NX0.CQvHZc2f_xrNkhDJ6keQRP-txT7fXddRUkBdvHC8lUA';

        // Cria o cliente Supabase, configurado para não manter a sessão no navegador
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
            auth: {
                persistSession: false
            }
        });

        // --- REFERÊNCIAS DE ELEMENTOS HTML ---
        const loginFormContainer = document.getElementById('login-form-container');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const loginButton = document.getElementById('login-button');
        const resetPasswordButton = document.getElementById('reset-password-button');
        const newPasswordContainer = document.getElementById('new-password-container');
        const newPasswordInput = document.getElementById('new-password');
        const confirmPasswordInput = document.getElementById('confirm-password');
        const updatePasswordButton = document.getElementById('update-password-button');
        const resetPasswordModal = document.getElementById('reset-password-modal');
        const resetEmailDisplay = document.getElementById('reset-email-display');
        const closeModalButton = document.getElementById('close-modal-button');
        const waitMessageModal = document.getElementById('wait-message-modal');
        const waitTimeSpan = document.getElementById('wait-time');
        const closeWaitModalButton = document.getElementById('close-wait-modal');

        // --- FUNÇÕES DE UI ---

        /**
         * Alterna a visibilidade entre o formulário de login e o de nova senha.
         * @param {('login'|'new-password')} view - A tela a ser exibida.
         */
        function toggleUI(view) {
            if (view === 'new-password') {
                loginFormContainer.classList.add('hidden');
                newPasswordContainer.classList.remove('hidden');
            } else { // 'login'
                loginFormContainer.classList.remove('hidden');
                newPasswordContainer.classList.add('hidden');
            }
        }

        /**
         * Exibe o modal de espera com uma contagem regressiva.
         * @param {number} seconds - O tempo em segundos para a contagem.
         */
        function showWaitModal(seconds) {
            let timeLeft = seconds;
            waitTimeSpan.textContent = timeLeft;
            waitMessageModal.classList.remove('hidden');
            waitMessageModal.classList.add('flex');

            const timer = setInterval(() => {
                timeLeft--;
                waitTimeSpan.textContent = timeLeft;
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    waitMessageModal.classList.add('hidden');
                    waitMessageModal.classList.remove('flex');
                }
            }, 1000);
        }

        // --- EVENT LISTENERS (OUVINTES DE EVENTOS) ---

        loginButton.addEventListener('click', async () => {
            const email = emailInput.value;
            const password = passwordInput.value;

            if (!email || !password) {
                alert('Por favor, preencha o email e a senha.');
                return;
            }

            const { error } = await supabase.auth.signInWithPassword({ email, password });

            if (error) {
                alert('Email ou senha incorretos. Tente novamente.');
                console.error('Erro no login:', error.message);
                passwordInput.value = '';
                passwordInput.focus();
            }
        });

        passwordInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                loginButton.click();
            }
        });

        resetPasswordButton.addEventListener('click', async () => {
            const email = emailInput.value;
            if (!email) {
                alert('Por favor, digite seu email para redefinir a senha.');
                emailInput.focus();
                return;
            }

            const redirectToUrl = `${window.location.origin}${window.location.pathname}`;

            const { error } = await supabase.auth.resetPasswordForEmail(email, {
                redirectTo: redirectToUrl
            });

            if (error) {
                console.error('Erro ao redefinir senha:', error);
                if (error.status === 429) { // Trata o erro de "Too Many Requests"
                    const waitTimeMatch = error.message.match(/after (\d+) seconds/);
                    const waitTime = waitTimeMatch ? parseInt(waitTimeMatch[1]) : 60;
                    showWaitModal(waitTime);
                } else {
                    alert('Erro ao enviar o email de redefinição. Verifique o console para mais detalhes.');
                }
            } else {
                resetEmailDisplay.textContent = email;
                resetPasswordModal.classList.remove('hidden');
                resetPasswordModal.classList.add('flex');
            }
        });

        updatePasswordButton.addEventListener('click', async () => {
            const newPassword = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;

            if (newPassword.length < 6) {
                alert('A senha deve ter no mínimo 6 caracteres.');
                return;
            }
            if (newPassword !== confirmPassword) {
                alert('As senhas não coincidem.');
                return;
            }

            const { error } = await supabase.auth.updateUser({ password: newPassword });

            if (error) {
                alert('Ocorreu um erro ao atualizar a senha. O link de recuperação pode ter expirado.');
                console.error('Erro ao atualizar senha:', error);
            } else {
                alert('Senha atualizada com sucesso!');
                // Limpa o hash da URL e recarrega a página para a tela inicial
                window.location.hash = '';
                window.location.reload();
            }
        });

        closeModalButton.addEventListener('click', () => {
            resetPasswordModal.classList.add('hidden');
            resetPasswordModal.classList.remove('flex');
        });

        closeWaitModalButton.addEventListener('click', () => {
            waitMessageModal.classList.add('hidden');
            waitMessageModal.classList.remove('flex');
        });

        // --- GERENCIAMENTO DE ESTADO DE AUTENTICAÇÃO ---

        supabase.auth.onAuthStateChange(async (event, session) => {
            if (event === 'SIGNED_IN') {
                // Após o login, limpa a tela para exibir uma página em branco.
                document.body.innerHTML = '';
                document.body.style.backgroundColor = 'white'; // Garante fundo branco
            } else if (event === 'PASSWORD_RECOVERY') {
                // Se o evento for de recuperação de senha, mostra a tela para criar uma nova senha.
                toggleUI('new-password');
            }
        });

        // --- INICIALIZAÇÃO ---
        // Nenhuma ação de inicialização é necessária agora que o formulário de login é exibido diretamente.

    </script>
</body>
</html>