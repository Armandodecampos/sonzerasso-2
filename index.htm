<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            @apply bg-gray-100;
        }
        button {
            -webkit-tap-highlight-color: transparent;
        }
    </style>
</head>
<body>
    <div id="app-container" class="flex items-center justify-center min-h-screen p-4">

        <!-- Formulário de Login com Email e Senha -->
        <div id="login-view" class="w-full max-w-sm space-y-6">
            <h2 class="text-3xl font-bold text-center text-gray-800">Login</h2>

            <!-- Campo do Email -->
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                <input type="email" id="email" autocomplete="email" required
                       class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg">
            </div>

            <!-- Campo da Senha -->
            <div>
                <label for="password" class="block text-sm font-medium text-gray-700">Senha</label>
                <input type="password" id="password" autocomplete="current-password" required
                       class="mt-1 block w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-lg">
            </div>

            <!-- Botão de Entrar -->
            <button id="login-button" class="w-full px-4 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-bold rounded-md shadow-lg hover:shadow-xl focus:outline-none transition-all text-lg">
                Entrar
            </button>
            <p id="error-message" class="text-red-500 text-center"></p>
        </div>

        <!-- Conteúdo Principal do Aplicativo (inicialmente escondido) -->
        <div id="main-app-view" class="hidden w-full max-w-6xl mx-auto my-8 p-4">
            <div class="bg-white p-8 rounded-lg shadow-lg w-full">
                <div class="flex justify-between items-center mb-6">
                    <h1 class="text-3xl font-bold text-gray-800">Music Player</h1>
                    <button id="logout-button" class="px-5 py-2 bg-red-600 text-white font-semibold rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-all">Logout</button>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                    <!-- Coluna da Esquerda: Playlists do Usuário -->
                    <div class="md:col-span-1">
                        <h2 class="text-2xl font-semibold mb-4">Minhas Pastas</h2>
                        <div id="playlists-container" class="space-y-3 mb-4">
                            <!-- As playlists do usuário serão inseridas aqui -->
                            <p class="text-gray-500">Nenhuma pasta criada ainda.</p>
                        </div>
                        <button id="create-playlist-button" class="w-full px-4 py-2 bg-indigo-600 text-white font-semibold rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Criar Nova Pasta
                        </button>
                    </div>

                    <!-- Coluna da Direita: Explorar Músicas -->
                    <div class="md:col-span-2">
                        <h2 class="text-2xl font-semibold mb-4">Explorar Músicas</h2>
                        <ul id="explore-music-list" class="h-96 overflow-y-auto border rounded-lg p-2 bg-gray-50">
                            <!-- A lista de músicas estática será inserida aqui -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <script type="module">
        import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/+esm';

        // --- CONFIGURAÇÃO DO SUPABASE ---
        const SUPABASE_URL = 'https://xukxlgorxpusgiyiesjy.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh1a3hsZ29yeHB1c2dpeWllc2p5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwMjA4NTUsImV4cCI6MjA3NTU5Njg1NX0.CQvHZc2f_xrNkhDJ6keQRP-txT7fXddRUkBdvHC8lUA';

        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
            auth: {
                persistSession: true // Manter a sessão do usuário
            }
        });

        // --- REFERÊNCIAS DE ELEMENTOS HTML ---
        const loginView = document.getElementById('login-view');
        const mainAppView = document.getElementById('main-app-view');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const loginButton = document.getElementById('login-button');
        const logoutButton = document.getElementById('logout-button');
        const errorMessage = document.getElementById('error-message');
        const exploreMusicList = document.getElementById('explore-music-list');
        const playlistsContainer = document.getElementById('playlists-container');
        const createPlaylistButton = document.getElementById('create-playlist-button');


        // --- DADOS ---
        const musicData = `
            <li data-src="https://www.archive.org/download/rocknacional80/14 Bis - Linda Juventude.mp3" data-peso="1" data-imagem="https://dl.dropbox.com/scl/fi/dzepffs8a3on6ca6qzdqv/Brazuca-Rock.webp?rlkey=di5hen69s51er8332qok7pqwk&st=sn3sqqzr&dl=0"><span class="artista">14 Bis</span><span class="album"></span><span class="musica">Linda Juventude</span><span class="identificador" style="display:none">rocknacional80</span></li>
            <li data-src="https://www.archive.org/download/rocknacional80/14 Bis - Mesmo de Brincadeira.mp3" data-peso="1" data-imagem="https://dl.dropbox.com/scl/fi/dzepffs8a3on6ca6qzdqv/Brazuca-Rock.webp?rlkey=di5hen69s51er8332qok7pqwk&st=sn3sqqzr&dl=0"><span class="artista">14 Bis</span><span class="album"></span><span class="musica">Mesmo de Brincadeira</span><span class="identificador" style="display:none">rocknacional80</span></li>
            <li data-src="https://www.archive.org/download/rocknacional80/14 Bis - Nova manhã.mp3" data-peso="1" data-imagem="https://dl.dropbox.com/scl/fi/dzepffs8a3on6ca6qzdqv/Brazuca-Rock.webp?rlkey=di5hen69s51er8332qok7pqwk&st=sn3sqqzr&dl=0"><span class="artista">14 Bis</span><span class="album"></span><span class="musica">Nova Manhã</span><span class="identificador" style="display:none">rocknacional80</span></li>
        `;

        // --- FUNÇÕES DE UI ---
        function toggleViews(isLoggedIn) {
            if (isLoggedIn) {
                loginView.classList.add('hidden');
                mainAppView.classList.remove('hidden');
                // Ajuste para não forçar a centralização, permitindo que o layout flua
                mainAppView.classList.remove('items-center', 'justify-center');
            } else {
                loginView.classList.remove('hidden');
                mainAppView.classList.add('hidden');
            }
        }

        function renderExploreMusic() {
            exploreMusicList.innerHTML = musicData;
            // Adicionar botão de adicionar a cada música
            exploreMusicList.querySelectorAll('li').forEach(item => {
                const addButton = document.createElement('button');
                addButton.textContent = '+';
                addButton.className = 'ml-4 px-2 py-1 bg-green-500 text-white rounded hover:bg-green-600 text-xs';
                addButton.onclick = () => addSongToPlaylist(item);
                item.classList.add('flex', 'justify-between', 'items-center', 'p-2', 'hover:bg-gray-200', 'rounded-md');
                item.appendChild(addButton);
            });
        }

        async function fetchAndRenderPlaylists() {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) return;

            const { data: playlists, error } = await supabase
                .from('playlists')
                .select('*')
                .eq('user_id', user.id);

            if (error) {
                console.error('Erro ao buscar playlists:', error);
                return;
            }

            playlistsContainer.innerHTML = '';
            if (playlists.length === 0) {
                playlistsContainer.innerHTML = '<p class="text-gray-500">Nenhuma pasta criada ainda.</p>';
            } else {
                playlists.forEach(playlist => {
                    const playlistElement = document.createElement('div');
                    playlistElement.className = 'p-3 bg-gray-100 rounded-md cursor-pointer hover:bg-gray-200';
                    playlistElement.textContent = playlist.name;
                    playlistElement.onclick = () => viewPlaylist(playlist);
                    playlistsContainer.appendChild(playlistElement);
                });
            }
        }
        
        async function addSongToPlaylist(songItem) {
            const { data: { user } } = await supabase.auth.getUser();
            if (!user) {
                alert("Você precisa estar logado para adicionar músicas.");
                return;
            }

            // Primeiro, vamos buscar as playlists do usuário para ele poder escolher
            const { data: playlists, error: playlistsError } = await supabase
                .from('playlists')
                .select('id, name')
                .eq('user_id', user.id);

            if (playlistsError || playlists.length === 0) {
                alert("Crie uma pasta primeiro para poder adicionar músicas!");
                return;
            }

            const playlistNames = playlists.map(p => `${p.id}:${p.name}`).join('\n');
            const chosenPlaylistId = prompt(`Digite o ID da pasta para adicionar a música:\n${playlists.map(p => `${p.id}: ${p.name}`).join('\n')}`);

            if (!chosenPlaylistId) return;

            const playlist = playlists.find(p => p.id.toString() === chosenPlaylistId);
            if (!playlist) {
                alert("ID da pasta inválido.");
                return;
            }

            const songData = {
                playlist_id: playlist.id,
                src: songItem.dataset.src,
                artist: songItem.querySelector('.artista').textContent,
                music: songItem.querySelector('.musica').textContent,
                image: songItem.dataset.imagem
            };

            const { error } = await supabase.from('playlist_songs').insert(songData);

            if (error) {
                alert('Erro ao adicionar música à pasta.');
                console.error('Erro ao adicionar música:', error);
            } else {
                alert(`Música "${songData.music}" adicionada à pasta "${playlist.name}"!`);
            }
        }

        function viewPlaylist(playlist) {
            // Futuramente: mostrar as músicas da playlist selecionada
            alert(`Visualizando a pasta: ${playlist.name}`);
        }

        // --- EVENT LISTENERS ---
        createPlaylistButton.addEventListener('click', async () => {
            const name = prompt("Digite o nome da nova pasta:");
            if (name) {
                const { data: { user } } = await supabase.auth.getUser();
                if (user) {
                    const { error } = await supabase.from('playlists').insert({ name, user_id: user.id });
                    if (error) {
                        alert('Erro ao criar a pasta.');
                        console.error("Erro ao criar playlist:", error);
                    } else {
                        await fetchAndRenderPlaylists();
                    }
                }
            }
        });

        loginButton.addEventListener('click', async () => {
            const email = emailInput.value;
            const password = passwordInput.value;
            errorMessage.textContent = ''; // Limpa a mensagem de erro

            if (!email || !password) {
                errorMessage.textContent = 'Por favor, insira o email e a senha.';
                return;
            }

            const { error } = await supabase.auth.signInWithPassword({ email, password });

            if (error) {
                console.error('Erro no login:', error.message);
                errorMessage.textContent = 'Email ou senha inválidos.';
            }
        });

        logoutButton.addEventListener('click', async () => {
            await supabase.auth.signOut();
        });

        // --- GERENCIAMENTO DE ESTADO DE AUTENTICAÇÃO ---
        supabase.auth.onAuthStateChange(async (event, session) => {
            toggleViews(!!session);
            if (session) {
                renderExploreMusic();
                await fetchAndRenderPlaylists();
            }
        });

        // --- INICIALIZAÇÃO ---
        // Verifica o estado de autenticação inicial ao carregar a página
        const checkInitialSession = async () => {
            const { data: { session } } = await supabase.auth.getSession();
            toggleViews(!!session);
            if (session) {
                renderExploreMusic();
                await fetchAndRenderPlaylists();
            }
        };

        checkInitialSession();

    </script>
</body>
</html>